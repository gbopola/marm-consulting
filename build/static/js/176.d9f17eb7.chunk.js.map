{"version":3,"file":"static/js/176.d9f17eb7.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/react-hook-form/src/utils/isCheckBoxInput.ts","../node_modules/react-hook-form/src/utils/isDateObject.ts","../node_modules/react-hook-form/src/utils/isNullOrUndefined.ts","../node_modules/react-hook-form/src/utils/isObject.ts","../node_modules/react-hook-form/src/logic/getEventValue.ts","../node_modules/react-hook-form/src/logic/isNameInFieldArray.ts","../node_modules/react-hook-form/src/logic/getNodeParentName.ts","../node_modules/react-hook-form/src/utils/compact.ts","../node_modules/react-hook-form/src/utils/isUndefined.ts","../node_modules/react-hook-form/src/utils/get.ts","../node_modules/react-hook-form/src/constants.ts","../node_modules/react-hook-form/src/logic/getProxyFormState.ts","../node_modules/react-hook-form/src/useFormContext.tsx","../node_modules/react-hook-form/src/utils/isEmptyObject.ts","../node_modules/react-hook-form/src/logic/shouldRenderFormState.ts","../node_modules/react-hook-form/src/utils/convertToArrayPayload.ts","../node_modules/react-hook-form/src/useSubscribe.ts","../node_modules/react-hook-form/src/utils/isString.ts","../node_modules/react-hook-form/src/logic/generateWatchOutput.ts","../node_modules/react-hook-form/src/utils/isFunction.ts","../node_modules/react-hook-form/src/utils/objectHasFunction.ts","../node_modules/react-hook-form/src/controller.tsx","../node_modules/react-hook-form/src/logic/appendErrors.ts","../node_modules/react-hook-form/src/utils/isKey.ts","../node_modules/react-hook-form/src/utils/stringToPath.ts","../node_modules/react-hook-form/src/utils/set.ts","../node_modules/react-hook-form/src/logic/focusFieldBy.ts","../node_modules/react-hook-form/src/logic/isWatched.ts","../node_modules/react-hook-form/src/logic/updateFieldArrayRootError.ts","../node_modules/react-hook-form/src/utils/isBoolean.ts","../node_modules/react-hook-form/src/utils/isFileInput.ts","../node_modules/react-hook-form/src/utils/isMessage.ts","../node_modules/react-hook-form/src/utils/isRadioInput.ts","../node_modules/react-hook-form/src/utils/isRegex.ts","../node_modules/react-hook-form/src/logic/getCheckboxValue.ts","../node_modules/react-hook-form/src/logic/getRadioValue.ts","../node_modules/react-hook-form/src/logic/getValidateError.ts","../node_modules/react-hook-form/src/logic/getValueAndMessage.ts","../node_modules/react-hook-form/src/logic/validateField.ts","../node_modules/react-hook-form/src/utils/isWeb.ts","../node_modules/react-hook-form/src/utils/cloneObject.ts","../node_modules/react-hook-form/src/utils/fillEmptyArray.ts","../node_modules/react-hook-form/src/utils/getValidationModes.ts","../node_modules/react-hook-form/src/utils/unset.ts","../node_modules/react-hook-form/src/utils/createSubject.ts","../node_modules/react-hook-form/src/utils/isPrimitive.ts","../node_modules/react-hook-form/src/utils/deepEqual.ts","../node_modules/react-hook-form/src/utils/isHTMLElement.ts","../node_modules/react-hook-form/src/utils/isMultipleSelect.ts","../node_modules/react-hook-form/src/utils/isRadioOrCheckbox.ts","../node_modules/react-hook-form/src/utils/live.ts","../node_modules/react-hook-form/src/logic/getDirtyFields.ts","../node_modules/react-hook-form/src/logic/getFieldValueAs.ts","../node_modules/react-hook-form/src/logic/getFieldValue.ts","../node_modules/react-hook-form/src/logic/getResolverOptions.ts","../node_modules/react-hook-form/src/logic/getRuleValue.ts","../node_modules/react-hook-form/src/logic/hasValidation.ts","../node_modules/react-hook-form/src/logic/schemaErrorLookup.ts","../node_modules/react-hook-form/src/logic/skipValidation.ts","../node_modules/react-hook-form/src/logic/unsetEmptyArray.ts","../node_modules/react-hook-form/src/logic/createFormControl.ts","../node_modules/react-hook-form/src/useForm.ts"],"sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  names.has(getNodeParentName(name));\n","export default (name: string) =>\n  name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n","export default <TValue>(value: TValue[]) =>\n  Array.isArray(value) ? value.filter(Boolean) : [];\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown): any => {\n  if (!path || !isObject(obj)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path as keyof T])\n      ? defaultValue\n      : obj[path as keyof T]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  FOCUS_OUT: 'focusout',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { FieldValues, FormState, ReadFormState } from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  const result = {} as typeof formState;\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key as keyof FormState<TFieldValues> & keyof ReadFormState;\n\n        if (_proxyFormState[_key] !== VALIDATION_MODE.all) {\n          _proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      },\n    });\n  }\n\n  return result;\n};\n","import React from 'react';\n\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useFrom methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const FormProvider = <TFieldValues extends FieldValues, TContext = any>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => {\n  const { children, ...data } = props;\n  return (\n    <HookFormContext.Provider value={data as unknown as UseFormReturn}>\n      {children}\n    </HookFormContext.Provider>\n  );\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const { name, ...formState } = formStateData;\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const tearDown = (subscription: Subscription | false) => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const { _f, ...currentField } = field;\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(currentField)) {\n        focusFieldBy(currentField, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import {\n  FieldError,\n  FieldErrors,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport compact from '../utils/compact';\nimport get from '../utils/get';\nimport set from '../utils/set';\n\nexport default <T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  error: Partial<Record<string, FieldError>>,\n  name: InternalFieldName,\n): FieldErrors<T> => {\n  const fieldArrayErrors = compact(get(errors, name));\n  set(fieldArrayErrors, 'root', error[name]);\n  set(errors, name, fieldArrayErrors);\n  return errors;\n};\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  InternalFieldErrors,\n  Message,\n  NativeFieldValue,\n} from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends NativeFieldValue>(\n  field: Field,\n  inputValue: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n  isFieldArray?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    isFieldArray\n      ? !Array.isArray(inputValue) || !inputValue.length\n      : required &&\n        ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n          (isBoolean(inputValue) && !inputValue) ||\n          (isCheckBox && !getCheckboxValue(refs).isValid) ||\n          (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNullOrUndefined(inputValue) && !isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || +inputValue;\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (\n    (maxLength || minLength) &&\n    !isEmpty &&\n    (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))\n  ) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (\n    !(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n    (isArray || isObject(data))\n  ) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction isEmptyArray(obj: unknown[]) {\n  for (const key in obj) {\n    if (!isUndefined(obj[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) && isEmptyArray(objectRef)))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","export default (value: unknown): value is HTMLElement => {\n  const owner = value ? ((value as HTMLElement).ownerDocument as Document) : 0;\n  const ElementClass =\n    owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement;\n  return value instanceof ElementClass;\n};\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import { Field, NativeFieldValue } from '../types';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === '' || isNullOrUndefined(value)\n      ? NaN\n      : +value\n    : valueAsDate && isString(value)\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? undefined\n    : isRegex(rule)\n    ? rule.source\n    : isObject(rule)\n    ? isRegex(rule.value)\n      ? rule.value.source\n      : rule.value\n    : rule;\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup<T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UseFormClearErrors,\n  UseFormGetFieldState,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport updateFieldArrayRootError from './updateFieldArrayRootError';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = cloneObject(_options.defaultValues) || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback | null;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T) =>\n    (wait: number) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(callback, wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuiltInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    values = [],\n    method,\n    args,\n    shouldSetValues = true,\n    shouldUpdateFieldsAndState = true,\n  ) => {\n    if (args && method) {\n      _stateFlags.action = true;\n      if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n\n      if (\n        _proxyFormState.errors &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.errors, name))\n      ) {\n        const errors = method(\n          get(_formState.errors, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n\n      if (\n        _proxyFormState.touchedFields &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.touchedFields, name))\n      ) {\n        const touchedFields = method(\n          get(_formState.touchedFields, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n\n      if (_proxyFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n\n      _subjects.state.next({\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid,\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _stateFlags.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isBlurEvent?: boolean,\n    shouldDirty?: boolean,\n    shouldRender?: boolean,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isBlurEvent && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isBlurEvent);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isBlurEvent);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback = debounce(() => updateErrors(name, error));\n      delayErrorCallback(props.delayError);\n    } else {\n      clearTimeout(timer);\n      delayErrorCallback = null;\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      (error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n      !isEmptyObject(fieldState) ||\n      shouldUpdateValid\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (\n      _proxyFormState.isValidating &&\n      !Object.values(validateFields).some((v) => v)\n    ) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as TFieldValues,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuiltInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const { _f, ...fieldValue } = field;\n\n        if (_f) {\n          const isFieldArrayRoot = _names.array.has(_f.name);\n          const fieldError = await validateField(\n            field,\n            get(_formValues, _f.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n            isFieldArrayRoot,\n          );\n\n          if (fieldError[_f.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          !shouldOnlyCheckValid &&\n            (get(fieldError, _f.name)\n              ? isFieldArrayRoot\n                ? updateFieldArrayRootError(\n                    _formState.errors,\n                    fieldError,\n                    _f.name,\n                  )\n                : set(_formState.errors, _f.name, fieldError[_f.name])\n              : unset(_formState.errors, _f.name));\n        }\n\n        fieldValue &&\n          (await executeBuiltInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = <TFieldArrayValues>(\n    name: InternalFieldName,\n  ): Partial<TFieldArrayValues>[] =>\n    compact(\n      get(\n        _stateFlags.mount ? _formValues : _defaultValues,\n        name,\n        props.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    !checkboxRef.disabled &&\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : fieldReference.refs[0] &&\n                (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.watch.next({\n              name,\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(\n        name,\n        fieldValue,\n        options.shouldTouch,\n        options.shouldDirty,\n        true,\n      );\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U extends SetValueConfig,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, cloneValue),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue)\n        ? setValues(name, cloneValue, options)\n        : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent =\n        event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n        delayErrorCallback && delayErrorCallback(0);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _subjects.state.next({\n        isValidating: true,\n      });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps &&\n        trigger(\n          field._f.deps as FieldPath<TFieldValues> | FieldPath<TFieldValues>[],\n        );\n\n      shouldRenderByError(name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuiltInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuiltInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const getFieldState: UseFormGetFieldState<TFieldValues> = (\n    name,\n    formState,\n  ) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n    error: get((formState || _formState).errors, name),\n  });\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info) =>\n            name(\n              _getWatch(undefined, defaultValue as DeepPartial<TFieldValues>),\n              info as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as DeepPartial<TFieldValues>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined = isBoolean(options.disabled);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    field\n      ? disabledIsDefined &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true, options.value);\n\n    return {\n      ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n      ...(_options.shouldUseNativeValidation\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: [\n                      ...refs.filter(live),\n                      fieldRef,\n                      ...(!!Array.isArray(get(_defaultValues, name))\n                        ? [{}]\n                        : []),\n                    ],\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = cloneObject(_formValues);\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuiltInValidation(_fields);\n        }\n\n        if (isEmptyObject(_formState.errors)) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          if (onInvalid) {\n            await onInvalid({ ..._formState.errors }, e);\n          }\n\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, get(_defaultValues, name));\n      } else {\n        setValue(name, options.defaultValue);\n        set(_defaultValues, name, options.defaultValue);\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue\n          ? _getDirty(name, get(_defaultValues, name))\n          : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n\n      _subjects.state.next({ ..._formState });\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values =\n      formValues && !isEmptyObject(formValues)\n        ? cloneUpdatedValues\n        : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (keepStateOptions.keepDirtyValues) {\n        for (const fieldName of _names.mount) {\n          get(_formState.dirtyFields, fieldName)\n            ? set(values, fieldName, get(_formValues, fieldName))\n            : setValue(\n                fieldName as FieldPath<TFieldValues>,\n                get(values, fieldName),\n              );\n        }\n      } else {\n        if (isWeb && isUndefined(formValues)) {\n          for (const name of _names.mount) {\n            const field = get(_fields, name);\n            if (field && field._f) {\n              const fieldReference = Array.isArray(field._f.refs)\n                ? field._f.refs[0]\n                : field._f.ref;\n\n              try {\n                if (isHTMLElement(fieldReference)) {\n                  fieldReference.closest('form')!.reset();\n                  break;\n                }\n              } catch {}\n            }\n          }\n        }\n\n        _fields = {};\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n\n      _subjects.array.next({\n        values,\n      });\n\n      _subjects.watch.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n\n    _stateFlags.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty:\n        keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\n          ? _formState.isDirty\n          : !!(\n              keepStateOptions.keepDefaultValues &&\n              !deepEqual(formValues, _defaultValues)\n            ),\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields:\n        keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\n          ? _formState.dirtyFields\n          : keepStateOptions.keepDefaultValues && formValues\n          ? getDirtyFields(_defaultValues, formValues)\n          : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name)._f;\n    const fieldRef = field.refs ? field.refs[0] : field.ref;\n    fieldRef.focus();\n    options.shouldSelect && fieldRef.select();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState,\n  };\n}\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  const callback = React.useCallback(\n    (value: FieldValues) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n    [control],\n  );\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback,\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","e","_e","f","TypeError","normalCompletion","didErr","call","step","next","_e2","element","type","Date","isObjectType","isNullOrUndefined","isDateObject","event","isObject","target","isCheckBoxInput","checked","names","name","has","substring","search","getNodeParentName","filter","Boolean","val","obj","path","defaultValue","result","compact","split","reduce","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","React","formState","_proxyFormState","localProxyFormState","isRoot","Object","defineProperty","get","_key","keys","formStateData","isEmptyObject","find","useSubscribe","props","_props","current","subscription","disabled","subject","subscribe","callback","unsubscribe","tearDown","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","data","isFunction","validateAllFieldCriteria","errors","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","field","_f","currentField","ref","focus","refs","isBlurEvent","some","watchName","startsWith","slice","fieldArrayErrors","RegExp","defaultResult","isValid","validResult","options","values","option","attributes","defaultReturn","previous","getValidateError","isMessage","every","isBoolean","validationData","isRegex","inputValue","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputRef","setCustomValidity","reportValidity","isRadio","isRadioInput","isCheckBox","isRadioOrCheckbox","isEmpty","isFileInput","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getCheckboxValue","getRadioValue","getValueAndMessage","maxOutput","minOutput","valueDate","valueAsDate","exceedMin","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","window","HTMLElement","document","cloneObject","copy","Set","isWeb","Blob","FileList","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isEmptyArray","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","createSubject","_observers","observers","observer","push","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","owner","ownerDocument","defaultView","isHTMLElement","isConnected","markFieldsDirty","isParentNodeArray","objectHasFunction","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","defaultValues","setValueAs","NaN","getFieldValue","files","isMultipleSelect","selectedOptions","getFieldValueAs","_fields","criteriaMode","rule","source","schemaErrorLookup","join","foundError","pop","isTouched","isSubmitted","reValidateMode","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","_options","_formState","isDirty","isValidating","dirtyFields","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","_defaultValues","_formValues","shouldUnregister","_stateFlags","action","unMount","array","timer","validateFields","_subjects","state","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","clearTimeout","setTimeout","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuiltInValidation","_updateFieldArray","method","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","argA","argB","unsetEmptyArray","getDirtyFields","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","delayError","updatedFormState","v","context","getResolverOptions","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","isFieldArrayRoot","validateField","fieldError","updateFieldArrayRootError","_removeUnmounted","live","unregister","getValues","_getWatch","generateWatchOutput","_getFieldArray","fieldReference","forEach","selectRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isWatched","onChange","getEventValue","shouldSkipValidation","hasValidation","deps","skipValidation","watched","onBlur","previousErrorLookupResult","errorLookupResult","fieldNames","convertToArrayPayload","all","shouldFocus","getFieldState","invalid","clearErrors","inputName","setError","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","disabledIsDefined","getRuleValue","fieldRef","querySelectorAll","radioOrCheckbox","isNameInFieldArray","handleSubmit","onValid","onInvalid","preventDefault","persist","hasNoPromiseError","resetField","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","keepDirtyValues","closest","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","shouldSelect","select","control","useForm","_formControl","updateFormState","shouldRenderFormState","getProxyFormState"],"sourceRoot":""}