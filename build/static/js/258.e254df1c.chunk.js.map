{"version":3,"file":"static/js/258.e254df1c.chunk.js","mappings":";gIAAAA,EAAgBC,GACdA,aAAiBC,YCCZ,MAAMC,EAAS,CACpBC,KAAM,OACNC,OAAQ,SACRC,MAAO,SAGIC,EAAkC,CAC7CC,OAAQ,SACRC,SAAU,WACVC,SAAU,WACVC,IAAK,OAKMC,EAAS,SAETC,EAAY,YAEZC,EACN,MADMA,EAEN,MAFMA,EAGA,YAHAA,EAIA,YAJAA,EAKF,UALEA,EAMD,WANCA,EAOD,WC5BZ,IAAAC,EAAgBd,GAAuD,MAATA,ECA9De,EAAmBf,GAAiCgB,MAAMD,QAAQf,GCG3D,MAAMiB,EAAgBjB,GAAoC,kBAAVA,EAEvD,IAAAkB,EAAkClB,IAC/Bc,EAAkBd,KAAWe,EAAQf,IAAUiB,EAAajB,GCJ/DmB,EAAgBnB,IACbe,EAAQf,KACR,QAAQoB,KAAKpB,KACX,mDAAmDoB,KAAKpB,ICL7DqB,EAAgBC,IACd,MAAMC,EAA8B,GAkBpC,OAhBAD,EAAME,QACJ,oGACA,CACEC,EACAC,EACAC,EACAC,KAEAL,EAAOM,KACLF,EACIC,EAAeJ,QAAQ,WAAY,MACnCE,GAAcD,EACnB,IAIEF,CAAM,WCbSO,EAAIC,EAAqBC,EAAchC,GAC7D,IAAIiC,GAAS,EACb,MAAMC,EAAWf,EAAMa,GAAQ,CAACA,GAAQX,EAAaW,GAC/CG,EAASD,EAASC,OAClBC,EAAYD,EAAS,EAE3B,OAASF,EAAQE,GAAQ,CACvB,MAAME,EAAMH,EAASD,GACrB,IAAIK,EAA4BtC,EAEhC,GAAIiC,IAAUG,EAAW,CACvB,MAAMG,EAAWR,EAAOM,GACxBC,EACEpB,EAASqB,IAAaxB,EAAQwB,GAC1BA,EACCC,OAAON,EAASD,EAAQ,IAEzB,CAAC,EADD,GAGRF,EAAOM,GAAOC,EACdP,EAASA,EAAOM,GAElB,OAAON,CACT,CCzBA,IAAAU,EAAgBC,GACdC,OAAOC,QAAQF,GAAMG,QACnB,CAACC,EAAqBC,KAAc,IAAXV,EAAKrC,GAAM+C,EAClC,OAAK5B,EAAMkB,GAKXM,OAAAK,OAAAL,OAAAK,OAAA,GAAYF,GAAQ,CAAE,CAACT,GAAMrC,KAJ3B8B,EAAIgB,EAAUT,EAAKrC,GACZ8C,EAGyB,GAEpC,CAAC,GCdLG,EAAgBC,QAA2CC,IAARD,ECAnDE,EAAgBpD,GAAiBA,EAAMqD,OAAOC,SCI9CC,EAAeA,CAACC,EAAUxB,EAAcyB,KACtC,MAAMlC,EAAS6B,EAAOpB,EAAK0B,MAAM,cAAcb,QAC7C,CAACtB,EAAQc,IAASvB,EAAkBS,GAAUA,EAASA,EAAOc,IAC9DmB,GAGF,OAAOP,EAAY1B,IAAWA,IAAWiC,EACrCP,EAAYO,EAAIxB,IACdyB,EACAD,EAAIxB,GACNT,CAAM,ECXZoC,EAAeA,CACbC,EACAC,KAEA,IAAK,MAAMxB,KAAOuB,EAChB,GAAIL,EAAIM,EAAaxB,GAAM,CACzB,MAAMyB,EAAQF,EAAOvB,GAErB,GAAIyB,EAAO,CACT,GAAIA,EAAMC,IAAIC,MAAO,CACnBF,EAAMC,IAAIC,QAEV,MACK,GAAIF,EAAMG,QAAS,CACxBH,EAAMG,QAAQ,GAAGF,IAAIC,QAErB,UCfVE,EAAeA,CACbH,EACAI,KAEIpE,EAAcgE,IAAQA,EAAIK,sBAC5BL,EAAIK,oBAAoBlE,EAAOG,MAAO8D,GACtCJ,EAAIK,oBAAoBlE,EAAOE,OAAQ+D,GACvCJ,EAAIK,oBAAoBlE,EAAOC,KAAMgE,KCHzC,MAAME,EAAkC,CACtCC,SAAS,EACTtE,MAAO,IAGT,IAAAuE,EAAgBN,GACdlD,EAAQkD,GACJA,EAAQpB,QACN,CAACC,EAAU0B,IACTA,GAAUA,EAAOT,IAAIU,QACjB,CACEH,SAAS,EACTtE,MAAOwE,EAAOT,IAAI/D,OAEpB8C,GACNuB,GAEFA,ECzBNK,EACET,GAEA,IAAIA,GACDZ,QAAOsB,IAAA,IAAC,SAAEC,GAAUD,EAAA,OAAcC,CAAQ,IAC1CC,KAAIC,IAAA,IAAC,MAAE9E,GAAO8E,EAAA,OAAa9E,CAAK,ICHrC+E,EAAgBC,GACG,UAAjBA,EAAQC,KCDVC,EAAgBF,GACG,SAAjBA,EAAQC,KCDVE,EAAgBH,GACG,aAAjBA,EAAQC,KCAVG,EAAgBJ,GACdA,EAAQC,OAAS,GAAGtE,aCJtB0E,EAAgBrF,GAA4B,KAAVA,ECUlC,MAAMsF,EAAqC,CACzCtF,OAAO,EACPsE,SAAS,GAGLiB,EAAc,CAAEvF,OAAO,EAAMsE,SAAS,GAE5C,IAAAkB,EAAgBvB,IACd,GAAIlD,EAAQkD,GAAU,CACpB,GAAIA,EAAQ9B,OAAS,EAAG,CACtB,MAAMsD,EAASxB,EACZZ,QAAQmB,GAAWA,GAAUA,EAAOT,IAAIU,UACxCI,KAAIa,IAAA,IAAG3B,KAAK,MAAE/D,IAAS0F,EAAA,OAAK1F,CAAK,IACpC,MAAO,CAAEA,MAAOyF,EAAQnB,UAAWmB,EAAOtD,QAG5C,MAAM,QAAEsC,EAAO,MAAEzE,EAAK,WAAE2F,GAAe1B,EAAQ,GAAGF,IAElD,OAAOU,EACHkB,IAAe1C,EAAa0C,EAAmB3F,OAC7CiD,EAAYjD,IAAUqF,EAAcrF,GAClCuF,EACA,CAAEvF,MAAOA,EAAOsE,SAAS,GAC3BiB,EACFD,EAGN,OAAOA,CAAa,WC5BEM,EACtBhC,EACAiC,GAEA,GAAIjC,EAAOiC,GAAO,CAChB,MAAM/B,EAAQF,EAAOiC,IAEnB9B,KAAK,MAAE/D,GAAO,IACd+D,GACED,EAEJ,OAAIoB,EAAYnB,GACPA,EAAI+B,MAGTf,EAAahB,GACRD,EAAQS,EAAcT,EAAMG,SAASjE,MAAQ,GAGlDoF,EAAiBrB,GACZW,EAAuBX,EAAIE,SAGhCkB,EAAWpB,KACND,GAAQ0B,EAAiB1B,EAAMG,SAASjE,MAG1CA,EAEX,UCpCwB+F,EAAWf,GACjC,OAAKA,GAKDA,aAAmB/E,aACrB+E,EAAQgB,WAAaC,KAAKC,eAKrBH,EAAWf,EAAQmB,WAC5B,CCZA,IAAAC,EAAgBpG,GACdkB,EAASlB,KAAW2C,OAAO0D,KAAKrG,GAAOmC,gBCSjBmE,EAAMvE,EAAaC,GACzC,MAAMuE,EAAapF,EAAMa,GAAQ,CAACA,GAAQX,EAAaW,GACjDwE,EACiB,GAArBD,EAAWpE,OAAcJ,EAV7B,SAAiBA,EAAaC,GAC5B,MAAO,IAAIhB,MAAMgB,EAAKG,SAASU,QAC7B,CAACtB,EAAQkF,EAAGC,IAAMnF,EAAOS,EAAK0E,KAAOnF,GACrCQ,EAEJ,CAKsC4E,CAAQ5E,EAAQwE,EAAWK,MAAM,GAAI,IACnEvE,EAAMkE,EAAWA,EAAWpE,OAAS,GAC3C,IAAI0E,EAEAL,UACKA,EAAYnE,GAGrB,IAAK,IAAIyE,EAAI,EAAGA,EAAIP,EAAWK,MAAM,GAAI,GAAGzE,OAAQ2E,IAAK,CACvD,IACIC,EADA9E,GAAS,EAEb,MAAM+E,EAAeT,EAAWK,MAAM,IAAKE,EAAI,IACzCG,EAAqBD,EAAa7E,OAAS,EAMjD,IAJI2E,EAAI,IACND,EAAiB9E,KAGVE,EAAQ+E,EAAa7E,QAAQ,CACpC,MAAM+E,EAAOF,EAAa/E,GAC1B8E,EAAYA,EAAYA,EAAUG,GAAQnF,EAAOmF,GAG/CD,IAAuBhF,IACrBf,EAAS6F,IAAcX,EAAcW,IACpChG,EAAQgG,KACNA,EAAU1D,QAAQX,GAASxB,EAASwB,KAAU0D,EAAc1D,KAC1DP,UAEP0E,SAAwBA,EAAeK,UAAenF,EAAOmF,IAG/DL,EAAiBE,GAIrB,OAAOhF,CACT,CCzCA,MAAMoF,EAAYA,CAACC,EAAmBrD,IACpCqD,GAAcA,EAAWrD,MAAQA,ECbnC,IAAAsD,EAAgBrH,GAAqD,kBAAVA,ECM3DsH,EAAeA,CACb1D,EACA2D,KAKA,MAAMC,EAAS,CAAC,EAEhB,IAAK,MAAM3B,KAAQjC,GAEfX,EAAYsE,KACXF,EAASE,GACN1B,EAAK4B,WAAWF,GAChBxG,EAAQwG,IAAWA,EAAOG,MAAMhF,GAASmD,EAAK4B,WAAW/E,SAE7D8E,EAAO3B,GAA2CD,EAChDhC,EACAiC,IAKN,OAAO2B,CAAM,ECzBfG,EAAeA,CACbC,EAA6BC,KAAA,IAC7B,KAAE5C,EAAI,MAAE6C,EAAK,QAAEC,GAAqBF,EAAA,OAEpC3G,EAAS0G,IACTA,EAAM3C,OAASA,GACf2C,EAAMG,UAAYA,GCVL,WAAqC,IAApCC,EAAAC,UAAA9F,OAAA,QAAAgB,IAAA8E,UAAA,GAAAA,UAAA,GAAe,CAAC,EAAGC,EAAAD,UAAA9F,OAAA,QAAAgB,IAAA8E,UAAA,GAAAA,UAAA,GAAe,CAAC,EACjD,MAAME,EAAcxF,OAAO0D,KAAK2B,GAEhC,OACEG,EAAYhG,SAAWQ,OAAO0D,KAAK6B,GAAS/F,QAC5CgG,EAAYC,OAAO/F,GAAQ6F,EAAQ7F,IAAQ6F,EAAQ7F,KAAS2F,EAAQ3F,IAExE,CDIEgG,CAAcT,EAAME,MAAOA,EAAM,EEXnC,IAAAQ,EAAgBtI,GAAoCA,aAAiBuI,OCQrE,IAAAC,EAAgBC,IACdC,OAHoCxH,EADpClB,EAIeyI,KAHyCH,EAAQtI,GAI5DyI,EACA,CACEzI,MAAOyI,EACPV,QAAS,IARf/H,KASK,ECdP2I,EAAgB3I,GACG,oBAAVA,ECDT4I,EAAgB5I,GAAsD,mBAAVA,ECK5D6I,EAAgB7I,GACdqH,EAASrH,IAAWkB,EAASlB,KAAU8I,EAAAA,EAAAA,gBAAe9I,YCFhC+I,EACtBxH,EACAwC,GACiB,IAAjBkB,EAAIgD,UAAA9F,OAAA,QAAAgB,IAAA8E,UAAA,GAAAA,UAAA,GAAG,WAEP,GAAIY,EAAUtH,IAAYqH,EAAUrH,KAAYA,EAC9C,MAAO,CACL0D,OACA8C,QAASc,EAAUtH,GAAUA,EAAS,GACtCwC,MAGN,CCVA,IAAAiF,GAAeA,CACbnD,EACAoD,EACAC,EACAjE,EACA8C,KAEA,GAAIkB,EAA0B,CAC5B,MAAMrB,EAAQsB,EAAOrD,GAErB,OAAAlD,OAAAK,OAAAL,OAAAK,OAAA,GACK4E,GAAK,CACRE,MAAKnF,OAAAK,OAAAL,OAAAK,OAAA,GACC4E,GAASA,EAAME,MAAQF,EAAME,MAAQ,CAAC,GAAC,CAC3C,CAAC7C,GAAO8C,IAAW,MAKzB,MAAO,CAAC,CAAC,ECIXoB,GAAeC,MACbC,EACAJ,EAAiCK,KAYzB,IAXR,IACEvF,EACAA,KAAK,KAAEkB,EAAI,MAAEjF,GAAO,QACpBiE,EAAO,SACPsF,EAAQ,UACRC,EAAS,UACTC,EAAS,IACTC,EAAG,IACHC,EAAG,QACHC,EAAO,SACPC,GACMP,QAER,MAAM1F,EAASyF,EAAUS,QACnBjE,EAAwC9B,EAAI8B,KAC5C+B,EAAuC,CAAC,EACxCmC,EAAUhF,EAAahB,GACvBiG,EAAa7E,EAAgBpB,GAC7BkG,EAAoBF,GAAWC,EAC/BE,EAAU7E,EAAcrF,GACxBmK,EAAoBnB,GAAaoB,KACrC,KACAvE,EACAoD,EACArB,GAEIyC,EAAmB,SACvBC,EACAC,EACAC,GAE0C,IAD1CC,EAAOxC,UAAA9F,OAAA,QAAAgB,IAAA8E,UAAA,GAAAA,UAAA,GAAGpH,EACV6J,EAAOzC,UAAA9F,OAAA,QAAAgB,IAAA8E,UAAA,GAAAA,UAAA,GAAGpH,EAEV,MAAMkH,EAAUuC,EAAYC,EAAmBC,EAC/C5C,EAAM/B,GAAKlD,OAAAK,OAAA,CACTiC,KAAMqF,EAAYG,EAAUC,EAC5B3C,UACAhE,OAEIoG,EADAG,EACkBG,EACAC,EADS3C,KAKnC,GACEwB,KACGQ,IAAYC,IAAeE,GAAWpJ,EAAkBd,KACxD4I,EAAU5I,KAAWA,GACrBgK,IAAexE,EAAiBvB,GAASK,SACzCyF,IAAYxF,EAAcN,GAASK,SACtC,CACA,MAAQtE,MAAO2K,EAAe5C,QAAS6C,GAAoB/B,EACzDU,GAEE,CAAEvJ,QAASuJ,EAAUxB,QAASwB,GAC9Bf,EAAmBe,GAEvB,GAAIoB,IACF/C,EAAM/B,GAAKlD,OAAAK,OAAA,CACTiC,KAAMpE,EACNkH,QAAS6C,EACT7G,IAAKkG,EAAmD,QAAlCY,EAAIjH,EAAOiC,GAAgB5B,eAAO,IAAA4G,OAAA,EAAAA,EAAG,GAAG9G,IAAMA,GACjEoG,EAAkBtJ,EAAiC+J,KAEnD3B,GACH,OAAOrB,EAKb,IAAK9G,EAAkB4I,KAAS5I,EAAkB6I,GAAM,CACtD,IAAIW,EACAQ,EACJ,MAAQ9K,MAAO+K,EAAUhD,QAASiD,GAAexC,EAAmBmB,IAC5D3J,MAAOiL,EAAUlD,QAASmD,GAAe1C,EAAmBkB,GAEpE,GAAa,WAATzE,IAAuBA,IAASzC,MAAMxC,GAAS,CACjD,MAAMmL,EACHpH,EAAyBqH,eAAiBC,WAAWrL,GACnDc,EAAkBiK,KACrBT,EAAYa,EAAcJ,GAEvBjK,EAAkBmK,KACrBH,EAAYK,EAAcF,OAEvB,CACL,MAAMK,EACHvH,EAAyBwH,aAAe,IAAIC,KAAKxL,GAChDqH,EAAS0D,KACXT,EAAYgB,EAAY,IAAIE,KAAKT,IAE/B1D,EAAS4D,KACXH,EAAYQ,EAAY,IAAIE,KAAKP,IAIrC,IAAIX,GAAaQ,KACfT,IACIC,EACFU,EACAE,EACArK,EACAA,IAEGoI,GACH,OAAOrB,EAKb,GAAIP,EAASrH,KAAWkK,IAAYV,GAAaC,GAAY,CAC3D,MACEzJ,MAAOyL,EACP1D,QAASwC,GACP/B,EAAmBgB,IAErBxJ,MAAO0L,EACP3D,QAASyC,GACPhC,EAAmBiB,GACjBkC,EAAc3L,EAAM4L,WAAWzJ,OAC/BmI,GACHxJ,EAAkB2K,IAAmBE,EAAcF,EAChDX,GACHhK,EAAkB4K,IAAmBC,EAAcD,EAEtD,IAAIpB,GAAaQ,KACfT,IAAmBC,EAAWC,EAAkBC,IAC3CvB,GACH,OAAOrB,EAKb,GAAIgC,IAAYM,EAAS,CACvB,MAAQlK,MAAO6L,EAAc9D,QAAS+D,GAAmBtD,EACvDoB,GAGF,GAAItB,EAAQuD,KAAkBA,EAAazK,KAAKpB,KAC9C4H,EAAM/B,GAAKlD,OAAAK,OAAA,CACTiC,KAAMpE,EACNkH,QAAS+D,EACT/H,OACGoG,EAAkBtJ,EAAgCiL,KAElD7C,GACH,OAAOrB,EAKb,GAAIiC,EAAU,CACZ,MAAMzC,EAAaxB,EAAehC,EAAQiC,GACpCkG,EAAc9B,GAAqBhG,EAAUA,EAAQ,GAAGF,IAAMA,EAEpE,GAAI4E,EAAWkB,GAAW,CACxB,MACMmC,EAAgBjD,QADDc,EAASzC,GACiB2E,GAE/C,GAAIC,IACFpE,EAAM/B,GAAKlD,OAAAK,OAAAL,OAAAK,OAAA,GACNgJ,GACA7B,EACDtJ,EACAmL,EAAcjE,WAGbkB,GACH,OAAOrB,OAGN,GAAI1G,EAAS2I,GAAW,CAC7B,IAAIoC,EAAmB,CAAC,EACxB,IAAK,MAAO5J,EAAK6J,KAAqBvJ,OAAOC,QAAQiH,GAAW,CAC9D,IAAKzD,EAAc6F,KAAsBhD,EACvC,MAGF,MACM+C,EAAgBjD,QADOmD,EAAiB9E,GAG5C2E,EACA1J,GAGE2J,IACFC,EAAgBtJ,OAAAK,OAAAL,OAAAK,OAAA,GACXgJ,GACA7B,EAAkB9H,EAAK2J,EAAcjE,UAGtCkB,IACFrB,EAAM/B,GAAQoG,IAKpB,IAAK7F,EAAc6F,KACjBrE,EAAM/B,GAAKlD,OAAAK,OAAA,CACTe,IAAKgI,GACFE,IAEAhD,GACH,OAAOrB,GAMf,OAAOA,CAAK,EC7OduE,GAAgBnM,GACdc,EAAkBd,KAAWiB,EAAajB,GCD5C,MAAMoM,GAAUA,CACdpK,EACAyD,KAEA,MAAM4G,EAAeA,CACnBrM,EACAqC,EACAnB,KAEA,MAAMoL,EAAgBpL,EAAW,GAAGc,KAAQK,IAAQ,GAAGL,KAAQK,KAC/D,OAAO8J,GAAYnM,GAASsM,EAAgBF,GAAQE,EAAetM,EAAM,EAG3E,OAAOe,EAAQ0E,GACXA,EAAOZ,KAAI,CAAC7E,EAAOqC,IAAQgK,EAAarM,EAAOqC,KAC/CM,OAAOC,QAAQ6C,GAAQZ,KAAI0H,IAAA,IAAElK,EAAKrC,GAAMuM,EAAA,OACtCF,EAAarM,EAAOqC,GAAK,EAAK,GAC/B,EAGP,ICXAmK,GAAeA,CACbC,EACAC,EACAC,EACAC,EACAC,KAKA,IAAI7M,EAkBJ,OAhBA2M,EAAYG,IAAIJ,GAEZtG,EAAcqG,GAChBzM,OAAQmD,EACEF,EAAYwJ,EAAYC,KAGlC1M,EAAQuD,EAAId,EAAsBgK,GAAcC,GAE3CzJ,EAAYjD,IDVN+M,EACbC,EACAhN,IACGoM,GAAQY,EAAYhN,GAAOiN,KAAKC,KCQ/BH,CAAsBL,EAAW1M,GAAOmN,SAAStH,GAC/C8G,EAAYG,IAAIjH,MANpB7F,EAAQyM,EAAYC,GAWfzJ,EAAYjD,GACf6M,EACED,EACArJ,EAAIqJ,EAAYF,GAClB1M,CAAK,EC7CXoN,GAAeC,IAAA,IAAC,WACdC,EAAU,SACVC,EAAQ,YACRC,EAAW,WACXC,EAAU,qBACVC,EAAoB,SACpBC,EAAQ,mBACRC,EAAkB,YAClBC,GAUDR,EAAA,OACEC,GAAcE,GACdC,GAAcC,GACdD,IAAeI,GACfF,IAAaH,IAAgBD,GAC7BK,IAAuBJ,GAAeD,GACtCG,GAAwBG,CAAY,ECxBvCC,GAAgBjI,GAAiBA,EAAKkI,UAAU,EAAGlI,EAAKmI,QAAQ,MCKhEC,GAAeA,CACbrK,EACAiC,KAEA,MAAMqI,EAAUzL,EAAsB6E,EAAgB1D,IACtD,OAAOiC,EAAOtC,EAAI2K,EAASrI,EAAMqI,GAAWA,CAAO,WCP7BC,GACtBC,EACAC,GAEA,IACGtN,EAAaqN,KACbrN,EAAasN,IACdD,EAAejM,SAAWkM,EAAgBlM,OAE1C,OAAO,EAGT,IAAK,IAAIuE,EAAI,EAAGA,EAAI0H,EAAejM,OAAQuE,IAAK,CAC9C,MAAM4H,EAAQF,EAAe1H,GACvB6H,EAAQF,EAAgB3H,GAE9B,GACEzD,EAAYsL,IACZ5L,OAAO0D,KAAKiI,GAAOnM,SAAWQ,OAAO0D,KAAKkI,GAAOpM,OAEjD,OAAO,EAGT,IAAK,MAAME,KAAOiM,EAChB,GAAIA,EAAMjM,KAASkM,EAAMlM,GACvB,OAAO,EAKb,OAAO,CACT,CClCO,MAAMmM,GAAwBA,CAAC3I,EAAc4I,IAClDlG,OACE,IAAIkG,UAAmBjN,QAAQ,MAAO,OAAOA,QAAQ,MAAO,QAC5DJ,KAAKyE,GAET,IAAA6I,GAAeA,CAACC,EAAoB9I,IAClC,IAAI8I,GAAOC,MAAM9E,GAAY0E,GAAsB3I,EAAMiE,KCH3D+E,GAAgB7J,GACdA,EAAQC,OAAS,GAAGtE,QCDtB,IAAAmO,GACEC,IAAW,CAOXtB,YAAasB,GAAQA,IAASzO,EAAgBG,SAC9CkN,SAAUoB,IAASzO,EAAgBC,OACnC+M,WAAYyB,IAASzO,EAAgBE,SACrCwO,QAASD,IAASzO,EAAgBI,MCVpCuO,GAAgBlL,GACdgB,EAAahB,IAAQoB,EAAgBpB,YC+DvBmL,KAY8B,IAT5C,KACAH,EAAOzO,EAAgBG,SAAQ,eAC/B0O,EAAiB7O,EAAgBE,SAAQ,SACzC4O,EAAQ,QACRC,EAAO,cACPC,EAAgB,CAAC,EAAiD,iBAClEC,GAAmB,EAAI,iBACvBC,GAAmB,EAAI,aACvBC,GAAYxH,UAAA9F,OAAA,QAAAgB,IAAA8E,UAAA,GAAAA,UAAA,GAC8B,CAAC,EAC3C,MAAMoB,GAAYqG,EAAAA,EAAAA,QAAsC,CAAC,GACnDC,GAAYD,EAAAA,EAAAA,QAAwC,CAAC,GACrDE,GAAmBF,EAAAA,EAAAA,QAAoC,CAAC,GACxDG,GAA0BH,EAAAA,EAAAA,QAAwC,CAAC,GACnEI,GAAiBJ,EAAAA,EAAAA,QACrB,IAAIK,KAEAC,GAAiBN,EAAAA,EAAAA,QAAoC,CAAC,GACtDO,GAAqBP,EAAAA,EAAAA,QAEzB,CAAC,GACGQ,GAA2BR,EAAAA,EAAAA,QAAuC,CAAC,GACnES,GAA0BT,EAAAA,EAAAA,QAC9B,IAAIK,KAEAK,GAAiBV,EAAAA,EAAAA,QACrB,IAAIK,KAEAM,GAAaX,EAAAA,EAAAA,SAAa,GAC1BY,GAAmBZ,EAAAA,EAAAA,QAGvBJ,GACIiB,GAA2Bb,EAAAA,EAAAA,QAC/B,CAAC,GAEGc,GAAYd,EAAAA,EAAAA,SAAa,GACzBe,GAAgBf,EAAAA,EAAAA,SAAa,GAC7BgB,GAAiBhB,EAAAA,EAAAA,SAAa,GAC9BiB,GAAajB,EAAAA,EAAAA,SAAa,GAC1BkB,GAAiBlB,EAAAA,EAAAA,QAAa,GAC9BmB,IAAkBnB,EAAAA,EAAAA,SAAa,GAC/BoB,IAAkBpB,EAAAA,EAAAA,UAClBqB,IAAwBrB,EAAAA,EAAAA,QAAkC,CAAC,GAC3DsB,IAA6BtB,EAAAA,EAAAA,QAAa,CAAC,GAC3CuB,IAAavB,EAAAA,EAAAA,QAAaL,GAC1B6B,IAAcxB,EAAAA,EAAAA,QAAaN,GAC3B+B,IAAqBzB,EAAAA,EAAAA,QAA0B,IAAIK,MAClD,CAAEqB,KAAUC,EAAAA,EAAAA,aACb,SAAE1D,GAAQ,WAAEF,GAAU,WAAEH,GAAU,QAAE0B,KAAYU,EAAAA,EAAAA,QACpDZ,GAAYC,IACZjF,QACIb,GAA2BwG,IAAiBnP,EAAgBI,IAC5D4Q,UAA2BC,SAAW3Q,EACtC4Q,UACGC,WAAa7Q,IACnB0Q,KACArO,EAAYsO,OAAOtR,aAChByR,GAAiBF,GAAQ,UAAWD,cAAgBI,QAAU/Q,EAC9DgR,IAAmBlC,EAAAA,EAAAA,QAA4B,CACnDmC,SAAUH,GACVI,aAAcJ,GACd7D,YAAaJ,GACbsE,aAAcL,GACdM,SAAUN,GACVO,cAAeP,GACfpN,SAAUoN,MAGV/D,SAAUC,GACVH,WAAYC,KACVgC,EAAAA,EAAAA,QAAaZ,GAAYK,IAAiBrF,QAC9CmH,GAAWnH,QAAUuF,EACrB6B,GAAYpH,QAAUsF,EAEtB,MAAM8C,IAAWC,EAAAA,EAAAA,cAAkB,KAC5B3B,EAAU1G,SACbsH,GAAO,CAAC,KAET,IAEGgB,IAA0BD,EAAAA,EAAAA,cAC9B,SACEtM,EACA+B,GACoC,IAApCyK,EAAApK,UAAA9F,OAAA,QAAAgB,IAAA8E,UAAA,IAAAA,UAAA,GAEIqK,EACFD,YCrJwCE,GAc/C,IAZC,OACArJ,EAAM,KACNrD,EAAI,MACJ+B,EAAK,YACL4K,EAAW,qBACXC,GAODF,EACC,MAAMG,EAAetM,EAAcwB,GAC7B+K,EAAcvM,EAAc8C,GAC5B0J,EAAoBrP,EAAIqE,EAAO/B,GAC/BgN,EAAkBtP,EAAI2F,EAAQrD,GAEpC,QAAI6M,IAAgBF,EAAYM,IAAIjN,SAKlC8M,IAAgBD,IACdC,IAAgBE,GACjBH,GAAgBD,EAAqBK,IAAIjN,KAAU2M,EAAYM,IAAIjN,KAK/D+M,IAAsBjL,EAAYkL,EAAiBD,GAC5D,CDqHQG,CAAuC,CACrC7J,OAAQyG,EAAU7F,QAClBlC,QACA/B,OACA2M,YAAapC,EAAetG,QAC5B2I,qBAAsBtC,EAAwBrG,UAElD,MAAMkJ,EAAgBzP,EAAIoM,EAAU7F,QAASjE,GAmB7C,GAjBIO,EAAcwB,KACZuI,EAAwBrG,QAAQgJ,IAAIjN,IAASqL,GAAYpH,WAC3DsG,EAAetG,QAAQgD,IAAIjH,GAC3ByM,EAAiBA,GAAkBU,GAGrCrD,EAAU7F,QAAUxD,EAAMqJ,EAAU7F,QAASjE,KAE7CuK,EAAetG,QAAQmJ,OAAOpN,GAC9ByM,EACEA,IACCU,IACArL,EAAYqL,EAAepL,EAAM/B,IAEpC/D,EAAI6N,EAAU7F,QAASjE,EAAM+B,EAAM/B,KAGjCyM,IAAmBxR,EAAkBuR,GAEvC,OADAH,MACO,IAGX,CAACA,GAAUhB,KAGPgC,IAAgBf,EAAAA,EAAAA,cACpB,CAAAgB,EAEEC,KAKW,IANX,IAAErP,EAAG,QAAEE,GAAgBkP,EAQvB,MAAMnT,EACJwR,IAASzR,EAAcgE,IAAQjD,EAAkBsS,GAC7C,GACAA,EAEFrO,EAAahB,IAAQE,EACvBA,EAAQkJ,SACNkG,IAAA,IAAGtP,IAAKuP,GAAqCD,EAAA,OAC1CC,EAAS7O,QAAU6O,EAAStT,QAAUA,CAAK,IAEvCkF,EAAYnB,GACjBsD,EAASrH,GACX+D,EAAI/D,MAAQA,EAEZ+D,EAAI+B,MAAQ9F,EAELoF,EAAiBrB,GAC1B,IAAIA,EAAIE,SAASkJ,SACdoG,GACEA,EAAU3O,SAAY5E,EAAiBwT,SAASD,EAAUvT,SAEtDmF,EAAgBpB,IAAQE,EACjCA,EAAQ9B,OAAS,EACb8B,EAAQkJ,SACNsG,IAAA,IAAG1P,IAAK2P,GAAaD,EAAA,OAClBC,EAAYjP,QAAWzE,EAAiBwT,SACvCE,EAAY1T,MACb,IAEJiE,EAAQ,GAAGF,IAAIU,UAAYzE,EAEhC+D,EAAI/D,MAAQA,IAGhB,CAACwR,KAGGmC,IAAWxB,EAAAA,EAAAA,cACdtM,IACC,MAAM,QAAEgM,EAAO,YAAEC,GAAgBF,GAAiB9H,QAElD,IAAKT,EAAUS,QAAQjE,KAAWgM,IAAYC,EAC5C,OAAO,EAGT,MAAM8B,EACJrD,EAAyBzG,QAAQjE,KACjCD,EAAcyD,EAAUS,QAASjE,GAC7BgO,EAAoBtQ,EAAIyM,EAAelG,QAASjE,GAChDiO,EAAepF,GAAmByC,GAAmBrH,QAASjE,GAC9DkO,EAAkBpD,EAAW7G,QAmBnC,OAjBI8J,EACF9R,EAAIkO,EAAelG,QAASjE,GAAM,GAElCS,EAAM0J,EAAelG,QAASjE,GAGhC8K,EAAW7G,QACRgK,GACC3F,GACEF,GACE5E,EAAUS,QACVgE,GAAwBjI,IAE1BtC,EAAI+M,EAAiBxG,QAASgE,GAAwBjI,OAEzDO,EAAc4J,EAAelG,SAG7B+H,GAAWkC,IAAoBpD,EAAW7G,SAC1CgI,GAAe+B,IAAsBtQ,EAAIyM,EAAelG,QAASjE,EAAM,GAG5E,IAGImO,IAAoB7B,EAAAA,EAAAA,cACxB/I,MACEvD,EACAoO,KAEA,GAAI5K,EAAUS,QAAQjE,GAAO,CAC3B,MAAM+B,QAAcuB,GAClBE,EACAJ,GACAI,EAAUS,QAAQjE,IAKpB,OAFAuM,GAAwBvM,EAAM+B,IAAOqM,GAAe,MAE7C7N,EAAcwB,GAGvB,OAAO,CAAK,GAEd,CAACwK,GAAyBnJ,KAGtBiL,IAAoC/B,EAAAA,EAAAA,cACxC/I,UAKE,MAAM,OAAEF,SAAiBgI,GAAYpH,QACnCmE,GAAyB5E,EAAUS,SACnCmH,GAAWnH,QACXb,IAEIkL,EAAsB9D,EAAWvG,QAGvC,GAFAuG,EAAWvG,QAAU1D,EAAc8C,GAE/BnI,EAAQqT,GACVA,EAAQjH,SAAStH,IACf,MAAM+B,EAAQrE,EAAI2F,EAAQrD,GAEtB+B,EACF9F,EAAI6N,EAAU7F,QAASjE,EAAM+B,GAE7BtB,EAAMqJ,EAAU7F,QAASjE,MAG7BqM,SACK,CACL,MAAMtK,EAAQrE,EAAI2F,EAAQkL,GAE1BhC,GACEgC,EACCxM,EAAQ,CAAE,CAACwM,GAAUxM,GAAU,CAAC,EACjCuM,IAAwB9D,EAAWvG,SAIvC,OAAO1D,EAAcuJ,EAAU7F,QAAQ,GAEzC,CAACoI,GAAUE,GAAyBnJ,GAA0BiI,KAG1DmD,IAAUlC,EAAAA,EAAAA,cACd/I,UAGE,MAAMxF,EAASiC,GAAQlD,OAAO0D,KAAKgD,EAAUS,SAE7C,GAAIoH,GAAYpH,QACd,OAAOoK,GAAkCtQ,GAG3C,GAAI7C,EAAQ6C,GAAS,CACnB,MAAMrC,QAAe+S,QAAQ5T,IAC3BkD,EAAOiB,KAAIuE,eAAsB4K,GAAkBtR,GAAM,MAG3D,OADAwP,KACO3Q,EAAO6G,MAAM9E,SAGtB,aAAa0Q,GAAkBpQ,EAAO,GAExC,CACEsQ,GACAF,GACA9B,GACAhB,KAIEqD,IAAoBpC,EAAAA,EAAAA,cACxB,CACEtM,EACA7F,EACAwU,EACAC,KAEA,IAAK,MAAMpS,KAAOrC,EAAO,CACvB,MAAM0M,EAAY,GAAG+H,GAAmB5O,IACtC9E,EAAQf,GAAS,IAAIqC,KAAS,IAAIA,MAE9ByB,EAAQuF,EAAUS,QAAQ4C,GAE5BxL,EAASlB,EAAMqC,KACjBkS,GAAkB1O,EAAM7F,EAAMqC,GAAMmS,EAAQ9H,GAG1C5I,IACFoP,GAAcpP,EAAO9D,EAAMqC,IAEvBmS,EAAOE,aACTf,GAASjH,GAGP8H,EAAOG,gBACTN,GAAQ3H,OAKhB,CAAC2H,GAASnB,GAAeS,KAGrBiB,IAAmBzC,EAAAA,EAAAA,cACvB,CACEtM,EACA7F,EACAwU,KAEA,GAAInL,EAAUS,QAAQjE,GAGpB,OAFAqN,GAAc7J,EAAUS,QAAQjE,GAAgB7F,GAEzCwU,EAAOE,aAAef,GAAS9N,GAC5BsG,GAAYnM,IACtBuU,GAAkB1O,EAAM7F,EAAOwU,KAGnC,CAACb,GAAUT,GAAeqB,KAGtBM,GAAkBhP,GACtB4K,EAAc3G,SACdgG,EAAehG,QAAQgJ,IAAIjN,IAC3BiK,EAAehG,QAAQgJ,KAAKjN,EAAKpE,MAAM,QAAU,IAAI,IAEjDqT,GAAsB,SAACjP,GAA0B,IAAZkP,IAAK9M,UAAA9F,OAAA,QAAAgB,IAAA8E,UAAA,KAAAA,UAAA,GAC9C,IAAK7B,EAAc6J,EAAmBnG,SACpC,IAAK,MAAMzH,KAAO4N,EAAmBnG,SAEjCmG,EAAmBnG,QAAQzH,GAAKyQ,IAAIjN,KACnCoK,EAAmBnG,QAAQzH,GAAK2S,MACjCtG,GAAmByC,GAAmBrH,QAASjE,MAE/CqK,EAAyBpG,QAAQzH,KACjC0S,GAAQ,GAKd,OAAOA,GA6BTjE,GAAgBhH,QAAUgH,GAAgBhH,QACtCgH,GAAgBhH,QAChBV,UAA8B,IAAvB,KAAEnE,EAAI,OAAEgQ,GAAeC,EAC5B,MAAMrP,EAAOoP,EAAUA,EAAepP,KAAO,GACvC/B,EAAQuF,EAAUS,QAAQjE,GAChC,IAAI+B,EAEJ,IAAK9D,EACH,OAGF,MAAM0J,EAAcvI,IAAS/E,EAAOC,KAC9BgV,GACHnG,IACD5B,GAAe,CACbG,WAAYhK,EAAIoM,EAAU7F,QAASjE,GACnCyH,cACAE,cACAC,cACAC,wBACAC,YACAC,sBACAC,YAAa6C,EAAe5G,UAEhC,IAAIuI,EAAesB,GAAS9N,IAASgP,GAAehP,GAWpD,GARE2H,IACCjK,EAAIqM,EAAiB9F,QAASjE,IAC/B+L,GAAiB9H,QAAQkI,UAEzBlQ,EAAI8N,EAAiB9F,QAASjE,GAAM,GACpCwM,GAAe,GAGb8C,EAEF,OADAL,GAAoBjP,GACbwM,GAAgBH,KAGzB,GAAI9C,EAAU,CACZ,MAAM,OAAElG,SAAiBkG,EACvBnB,GAAyB5E,EAAUS,SACnCmH,GAAWnH,QACXb,IAEIkL,EAAsB9D,EAAWvG,QACvCuG,EAAWvG,QAAU1D,EAAc8C,GAEnCtB,EAASrE,EAAI2F,EAAQrD,GACjB,CAAE,CAACA,GAAOtC,EAAI2F,EAAQrD,IACtB,CAAC,EAEDsO,IAAwB9D,EAAWvG,UACrCuI,GAAe,QAGjBzK,QAAcuB,GACZE,EACAJ,GACAnF,GAIJgR,GAAoBjP,IAEfuM,GAAwBvM,EAAM+B,IAAUyK,GAC3CH,MAIR,MAAMkD,IAAmBjD,EAAAA,EAAAA,cACvB,WAAiB,IAAhB1M,EAAAwC,UAAA9F,OAAA,QAAAgB,IAAA8E,UAAA,GAAAA,UAAA,GAAc,CAAC,EACd,MAAMwE,EAAcrG,EAAckK,EAAiBxG,SAC/CxC,EAAgB+B,EAAUS,SAC1BwG,EAAiBxG,QAErBoH,GAAYpH,QACVrH,EAAqBE,OAAAK,OAAAL,OAAAK,OAAC,CAAC,EAClByJ,GACAhH,IAELwL,GAAWnH,QACXb,IACAoM,MAAKC,IAAW,IAAV,OAAEpM,GAAQoM,EAChB,MAAMnB,EAAsB9D,EAAWvG,QACvCuG,EAAWvG,QAAU1D,EAAc8C,GAE/BiL,IAAwB9D,EAAWvG,SACrCoI,UAIN,CAACA,GAAUjJ,GAA0BiI,KAGjCqE,IAA2BpD,EAAAA,EAAAA,cAC/B,CAACrO,EAAc0R,exBpiBjB5R,EACA6R,EACA3R,EACAiN,EACAvB,EACAgG,GAEA,MAAM,IACJzR,EACAA,KAAK,KAAE8B,EAAI,KAAEZ,GAAM,gBACnByQ,GACE5R,EACE6R,EAAW/R,EAAOiC,GAExB,IAAK2J,EAAkB,CACrB,MAAMxP,EAAQ4F,EAAchC,EAAQiC,GAE/B5C,EAAYjD,KACf+Q,EAAsBjH,QAAQjE,GAAQ7F,GAI1C,GAAKiF,EAKL,IAAKF,EAAahB,IAAQoB,EAAgBpB,KAAS4R,EAAU,CAC3D,MAAM,QAAE1R,GAAY0R,EAEhB5U,EAAQkD,IAAYA,EAAQ9B,QAC9BiB,EAAOa,GAASkJ,SAAQ,CAAC3I,EAAQvC,KAC/B,MAAM,IAAE8B,EAAG,gBAAE2R,GAAoBlR,GAC5BT,GAAOgC,EAAWhC,IAAQoD,EAAU3C,EAAQT,IAASyR,KACxDtR,EAAwBH,EAAK0R,GAEzBC,GACFA,EAAgBE,aAGlBtP,EAAMrC,EAAS,IAAIhC,UAInBgC,IAAYb,EAAOa,GAAS9B,eACvByB,EAAOiC,WAGTjC,EAAOiC,QAENE,EAAWhC,IAAQoD,EAAUwO,EAAU5R,IAASyR,KAC1DtR,EAAwBH,EAAK0R,GAEzBC,GACFA,EAAgBE,oBAGXhS,EAAOiC,gBAlCPjC,EAAOiC,EAoClB,CwB0eMgQ,CACExM,EAAUS,QACVgH,GAAgBhH,QAChBhG,EACAiN,GACAvB,EACAgG,EACD,GAEH,CAAChG,IAGGsG,IAAiC3D,EAAAA,EAAAA,cACrC,CAACrO,EAA0B0R,MAEvB1R,GACE4K,GAAmByC,GAAmBrH,QAAShG,EAAMC,IAAI8B,QACzD2P,IAEFD,GAAyBzR,EAAO0R,GAE5BhG,IACF,CACEG,EACAC,EACAI,EACAO,GACApD,SAASzK,GAAS4D,EAAM5D,EAAKoH,QAAShG,EAAMC,IAAI8B,QAClD,CACEsK,EACAC,EACAN,GACA3C,SAASzK,GAASA,EAAKoH,QAAQmJ,OAAOnP,EAAMC,IAAI8B,SAGhD+L,GAAiB9H,QAAQxF,SACzBsN,GAAiB9H,QAAQkI,WAEzBE,KAEIhB,GAAYpH,SACdsL,UAMV,CAAClD,GAAUkD,GAAkBG,GAA0BrE,KA4BzD,MAAM6E,IAAgB5D,EAAAA,EAAAA,cACpB,CACE6D,EACAvS,EACAwS,KAEA,MAAMtJ,EAAcsJ,EAChBhG,EAAmBnG,QAAQmM,GAC3BnG,EAAehG,QACboM,EAAwBjT,EAAYQ,GACtC6M,EAAiBxG,QACjBrG,EACEgJ,EAAcnF,EAClB+B,EAAUS,QACVkM,GAGF,OAAI3O,EAAS2O,GACJxJ,GACLC,EACAuJ,EACArJ,EACA1J,EAAYQ,GACRF,EAAI2S,EAAuBF,GAC1BvS,GACL,GAIA1C,EAAQiV,GACHA,EAAWnT,QAChB,CAACC,EAAU+C,IAAIlD,OAAAK,OAAAL,OAAAK,OAAA,GACVF,GAAQ,CACX,CAAC+C,GAAO2G,GACNC,EACA5G,EACA8G,EACAuJ,MAKJ,CAAC,IAIDjT,EAAYgT,KACdxF,EAAc3G,SAAU,GAGnBrH,GACH2D,EAAcqG,IAAgBA,GAC7ByJ,GACJ,GAEH,IAoCF,SAASC,GACPpS,GAC4C,IAA5CqS,EAAAnO,UAAA9F,OAAA,QAAAgB,IAAA8E,UAAA,GAAAA,UAAA,GAA0C,CAAC,EAE3C,IAAKlE,EAAI8B,KAEP,OAAOwQ,QAAQC,KAAK,iBAAkBvS,GAGxC,MAAM,KAAE8B,EAAI,KAAEZ,EAAI,MAAEjF,GAAU+D,EACxBwS,EAA4B5T,OAAAK,OAAA,CAChCe,OACGqS,GAECxS,EAASyF,EAAUS,QACnBG,EAAoBgF,GAA0BlL,GACpD,IAEI+P,EACArQ,EAHAK,EAAQF,EAAOiC,GACf2Q,GAAsB,EAI1B,GACE1S,IACCmG,EACGlJ,EAAQ+C,EAAMG,UACdb,EAAOU,EAAMG,SAASyD,MAAMlD,GACnBxE,IAAUwE,EAAOT,IAAI/D,OAASwE,EAAOT,MAAQA,IAEtDA,IAAQD,EAAMC,KAMlB,YAJAH,EAAOiC,GAAKlD,OAAAK,OAAAL,OAAAK,OAAA,GACPc,GACAsS,IAKP,GAAInR,EAAM,CACR,MAAMyQ,WE/vBV1Q,EACAyR,GAEA,MAAMC,EAAW,IAAIC,kBAAiB,KAChC5Q,EAAWf,KACb0R,EAASd,aACTa,QASJ,OALAC,EAASE,QAAQrF,OAAOE,SAAU,CAChCoF,WAAW,EACXC,SAAS,IAGJJ,CACT,CF+uB8BK,CAAYhT,GAAK,IACvC+R,GAA+BhS,KAGjCA,EAAQmG,EAAiB,eAEnBhG,QAAS,IACJb,EAAQU,GAASA,EAAMG,SAAY,IACtC,CACEF,MACA2R,oBAGJ3R,IAAK,CAAEkB,OAAMY,SACVuQ,GAAezT,OAAAK,OAAAL,OAAAK,OAAA,GAGfuT,GAA4B,CAC/Bb,yBAGN5R,EAAQyS,EAGV3S,EAAOiC,GAAQ/B,EAEf,MAAMkT,EAAuB/T,EAC3B8N,GAAsBjH,QAAQjE,IAG3BO,EAAckK,EAAiBxG,UAAakN,IAC/CvT,EAAeuT,EACXzT,EAAI+M,EAAiBxG,QAASjE,GAC9BkL,GAAsBjH,QAAQjE,GAClC2Q,EAAsBvT,EAAYQ,GAClCqQ,EAAepF,GAAmByC,GAAmBrH,QAASjE,GAEzD2Q,GAAwB1C,GAC3BZ,GAAcpP,EAAOL,IAIrB2L,IAAa0E,GAAgBlC,GAAiB9H,QAAQxF,QACxD8Q,KACUhP,EAAcgQ,KACxBjG,EAAwBrG,QAAQgD,IAAIjH,IAE/B4H,IAAcmE,GAAiB9H,QAAQxF,SAC1C6E,GAAcE,EAAWJ,GAA0BnF,GAAOuR,MACvDzN,IACC,MAAMuM,EAAsB9D,EAAWvG,QAEvC1D,EAAcwB,GACVwI,EAAetG,QAAQgD,IAAIjH,GAC1BwK,EAAWvG,SAAU,EAEtBqK,IAAwB9D,EAAWvG,SACrCoI,SAQP3B,EAAyBzG,QAAQjE,IAChCiO,GAAgB0C,IAElBjG,EAAyBzG,QAAQjE,GAAQ2Q,EACrC5Q,EAAchC,EAAQiC,GACtBpC,GAGFwB,YGx0BoCgS,GAQ3C,IAPCnT,OAAO,IAAEC,GAAK,aACd0R,EAAY,kBACZxL,GAKDgN,EACKlX,EAAcgE,IAAQ0R,IACxB1R,EAAImT,iBACFjN,EAAoB/J,EAAOE,OAASF,EAAOG,MAC3CoV,GAEF1R,EAAImT,iBAAiBhX,EAAOC,KAAMsV,GAEtC,CHyzBM0B,CAAqB,CACnBrT,MACEmG,GAAqBnG,EAAMG,QACvBH,EAAMG,QAAQH,EAAMG,QAAQ9B,OAAS,GACrC2B,EACNmG,kBACEA,GAAqB4E,GAAc9K,GACrC0R,aAAc3E,GAAgBhH,UAuCpC,MAAMsN,IAAejF,EAAAA,EAAAA,cAEjBkF,GACGjO,UACCkO,IACFA,EAAEC,iBACFD,EAAEE,WAEJ,IAAI3T,EAAyC,CAAC,EAC1C4I,EAAW9J,OAAAK,OAAAL,OAAAK,OAAA,GACV+N,GAAsBjH,SACtBxC,EAAgB+B,EAAUS,UAG3B8H,GAAiB9H,QAAQmI,eAC3BpB,GAAgB/G,SAAU,EAC1BoI,MAGF,IACE,GAAIhB,GAAYpH,QAAS,CACvB,MAAM,OAAEZ,EAAM,OAAEzD,SAAiByL,GAAYpH,QAC3CrH,EAAsBgK,GACtBwE,GAAWnH,QACXb,IAEF0G,EAAU7F,QAAUZ,EACpBrF,EAAcqF,EACduD,EAAchH,OAEd,IAAK,MAAM3B,KAASnB,OAAO8C,OAAO4D,EAAUS,SAC1C,GAAIhG,EAAO,CACT,MACEC,KAAK,KAAE8B,IACL/B,EAEE2T,QAAmBtO,GACvBE,EACAJ,GACAnF,GAGE2T,EAAW5R,IACb/D,EAAI+B,EAAagC,EAAM4R,EAAW5R,IAClCuK,EAAetG,QAAQmJ,OAAOpN,IACrBsK,EAAwBrG,QAAQgJ,IAAIjN,IAC7CuK,EAAetG,QAAQgD,IAAIjH,GAOjCO,EAAcvC,IACdlB,OAAO0D,KAAKsJ,EAAU7F,SAAS1B,OAAOvC,GACpClD,OAAO0D,KAAKgD,EAAUS,SAAS0J,SAAS3N,MAG1C8J,EAAU7F,QAAU,CAAC,EACrBoI,WACMmF,EAAS5U,EAAsBgK,GAAc6K,KAEnD3H,EAAU7F,QAAOnH,OAAAK,OAAAL,OAAAK,OAAA,GACZ2M,EAAU7F,SACVjG,GAED0L,GAAoBiC,IACtB7N,EAAkB0F,EAAUS,QAASjG,IAGzC,QACA6M,EAAe5G,SAAU,EACzB+G,GAAgB/G,SAAU,EAC1B8G,EAAe9G,QAAU8G,EAAe9G,QAAU,EAClDoI,QAGJ,CAACV,GAAOU,GAAUhB,GAAa3B,EAAkBtG,KAwF7CyO,GACJ7R,GAGiBD,EAAcyD,EAAUS,QAASjE,IA+BpD8R,EAAAA,EAAAA,YAAgB,KACdnH,EAAU1G,SAAU,EAEb,KACL0G,EAAU1G,SAAU,EACpBT,EAAUS,SAERnH,OAAO8C,OAAO4D,EAAUS,SAASqD,SAASrJ,GACxCgS,GAA+BhS,GAAO,IACvC,IAEJ,CAACgS,KAEC1G,IACHiB,EAAWvG,QACTsG,EAAetG,QAAQkL,MAAQ7E,EAAwBrG,QAAQkL,MAC/D5O,EAAcuJ,EAAU7F,UAG5B,MAAM8N,GAAY,CAChB9F,YAAa9B,EAAelG,QAC5B+D,YAAa6C,EAAe5G,QAC5BiI,YAAanB,EAAe9G,QAC5BkI,QAASpC,EAAiB9F,QAC1B+H,QAASlB,EAAW7G,QACpBmI,aAAcpB,GAAgB/G,QAC9BxF,QAASmJ,GACLiD,EAAe5G,SAAW1D,EAAcuJ,EAAU7F,SAClDuG,EAAWvG,SAGX+N,GAAc,CAClBxD,WACAyD,UAAU3F,EAAAA,EAAAA,cAzqBZ,SAIEtM,EACA7F,GAG2B,IAA3BwU,EAAAvM,UAAA9F,OAAA,QAAAgB,IAAA8E,UAAA,GAAAA,UAAA,GAAyB,CAAC,EAE1B,MAAMoK,EACJuC,GAAiB/O,EAAM7F,EAA+BwU,KACrDrI,GAAYnM,IACb6U,GAAehP,GAEjBiP,GAAoBjP,GAEhBwM,GACFH,KAGEsC,EAAOG,gBACTN,GAAQxO,KAmpB4B,CACpCqM,GACA0C,GACAP,KAEF0D,WAAW5F,EAAAA,EAAAA,cA1Db,SAAmBiC,GACjB,MAAMxQ,EAASyF,EAAUS,QAEzB,OAAIzC,EAAS+M,GACJsD,GAAStD,GAGdrT,EAAQqT,GACHA,EAAQvR,QACb,CAACC,EAAU+C,IAAIlD,OAAAK,OAAAL,OAAAK,OAAA,GACVF,GAAQ,CACX,CAAC+C,GAAO6R,GAAS7R,MAEnB,CAAC,GAIEpD,EAAsB6E,EAAgB1D,MAyCL,IACxCoU,UAAU7F,EAAAA,EAAAA,cAtQZ,SACE8F,EAKAC,GAEA,IAAK5G,GACH,GAAIjK,EAAS4Q,GACX9B,GAAkB,CAAEtQ,KAAMoS,GAA0BC,OAC/C,KACLhX,EAAS+W,MACT,SAAUA,GAIV,OAAQlU,GACNA,GAAOoS,GAAkBpS,EAAKkU,GAHhC9B,GAAkB8B,EAAwBC,MAuPR,CAAC5H,EAAiBxG,UACxDqO,YAAYhG,EAAAA,EAAAA,cAtZd,SACEtM,IAEC9E,EAAQ8E,GAAQA,EAAO,CAACA,IAAOsH,SAAST,GACvCoJ,GAA+BzM,EAAUS,QAAQ4C,IAAY,OAkZrB,IAC1CkL,UAAWlG,GACP,IAAIC,MAAoCiG,GAAW,CACjDrU,IAAKA,CAACC,EAAK4U,KACT,GAAIA,KAAQ5U,EAEV,OADAoO,GAAiB9H,QAAQsO,IAAQ,EAC1B5U,EAAI4U,EAGG,IAGpBR,IAGAS,GAAO1V,OAAAK,OAAAL,OAAAK,OAAAL,OAAAK,OAAA,CACXuS,4BACAT,uBACAiB,iBACA7D,aACI9C,EAAW,CAAEkJ,sBAAuBlD,IAAqB,CAAC,GAAC,CAC/DrG,KAAM,CACJpB,YACAF,cACAH,eAEF6B,eAAgB,CACdvB,sBACAF,yBAEFiC,YACAC,mBACAvG,YACAoH,gBACAX,iBACAkB,8BACAf,qBACAC,2BACAL,0BACAO,iBACAJ,iBACAG,0BACAgB,sBACAR,aACAD,iBACAkB,oBACAtB,mBACAS,2BACG8G,IAGL,OAAAlV,OAAAK,OAAA,CACEuV,MAjdF,SACEvC,EACAvS,GAEA,OAAOsS,GAAcC,EAAYvS,IA8cjC4U,WACAjB,gBACAoB,OAAOrG,EAAAA,EAAAA,cAtKK,SACZ1M,GACmC,IAAnCgT,EAAAxQ,UAAA9F,OAAA,QAAAgB,IAAA8E,UAAA,GAAAA,UAAA,GAAiC,CAAC,EAElC,GAAIuJ,GACF,IAAK,MAAM1N,KAASnB,OAAO8C,OAAO4D,EAAUS,SAC1C,GAAIhG,EAAO,CACT,MAAM,IAAEC,EAAG,QAAEE,GAAYH,EACnB4U,EACJzJ,GAA0BlL,IAAQhD,EAAQkD,GACtCA,EAAQ,GAAGF,IACXA,EAEN,GAAIhE,EAAc2Y,GAChB,IACEA,EAASC,QAAQ,QAASH,QAC1B,MACA,MAAA3N,GAAO,EAMbpF,IACF6K,EAAiBxG,QAAUrE,GAG7B9C,OAAO8C,OAAOuL,GAA2BlH,SAASqD,SAC/CyL,GAAoBjQ,EAAWiQ,IAAoBA,MA7EtCC,KAQD,IARE,OACjB3P,EAAM,QACN2I,EAAO,YACPhE,EAAW,QACXmE,EAAO,QACP1N,EAAO,YACPyN,EAAW,YACXD,GACe+G,EACfxP,EAAUS,QAAU,CAAC,EAChBZ,IACHyG,EAAU7F,QAAU,CAAC,GAGlBkI,IACHpC,EAAiB9F,QAAU,CAAC,GAGzBxF,IACH8L,EAAetG,QAAU,IAAIiG,IAC7BI,EAAwBrG,QAAU,IAAIiG,IACtCM,EAAWvG,SAAU,GAGlB+H,IACHlB,EAAW7G,SAAU,GAGlBgI,IACH9B,EAAelG,QAAU,CAAC,GAGvB+D,IACH6C,EAAe5G,SAAU,GAGtBiI,IACHnB,EAAe9G,QAAU,GAG3ByG,EAAyBzG,QAAU,CAAC,EAGpC+F,EAAwB/F,QAAU,CAAC,EACnCiH,GAAsBjH,QAAU,CAAC,EACjCgG,EAAehG,QAAU,IAAIiG,IAC7BU,EAAc3G,SAAU,CAAK,EAkC7BgP,CAAUL,GAEVvG,OAqIgC,IAChC6G,aAAa5G,EAAAA,EAAAA,cA1jBf,SACEtM,GAEIA,GACD9E,EAAQ8E,GAAQA,EAAO,CAACA,IAAOsH,SAAS6L,GACvC1S,EAAMqJ,EAAU7F,QAASkP,KAG3BrJ,EAAU7F,QAAU,CAAC,EAGvBoI,OA+iB4C,IAC5C+G,UAAU9G,EAAAA,EAAAA,cA7iBZ,SAAkBtM,EAA+B+B,GAC/CyI,EAAWvG,SAAU,EAErBhI,EAAI6N,EAAU7F,QAASjE,EAAIlD,OAAAK,OAAAL,OAAAK,OAAA,GACtB4E,GAAK,CACR7D,KAAMsF,EAAUS,QAAQjE,IAAS,CAAC,GAAI9B,OAGxCmO,OAqiBsC,IACtChJ,OAAQyG,EAAU7F,SACf+N,GAEP,OIpqCaqB,IAAcC,EAAAA,EAAAA,eAA2C,MAEtED,GAAYE,YAAc","sources":["../node_modules/react-hook-form/src/utils/isHTMLElement.ts","../node_modules/react-hook-form/src/constants.ts","../node_modules/react-hook-form/src/utils/isNullOrUndefined.ts","../node_modules/react-hook-form/src/utils/isArray.ts","../node_modules/react-hook-form/src/utils/isObject.ts","../node_modules/react-hook-form/src/utils/isKey.ts","../node_modules/react-hook-form/src/utils/stringToPath.ts","../node_modules/react-hook-form/src/utils/set.ts","../node_modules/react-hook-form/src/logic/transformToNestObject.ts","../node_modules/react-hook-form/src/utils/isUndefined.ts","../node_modules/react-hook-form/src/utils/unique.ts","../node_modules/react-hook-form/src/utils/get.ts","../node_modules/react-hook-form/src/logic/focusOnErrorField.ts","../node_modules/react-hook-form/src/logic/removeAllEventListeners.ts","../node_modules/react-hook-form/src/logic/getRadioValue.ts","../node_modules/react-hook-form/src/logic/getMultipleSelectValue.ts","../node_modules/react-hook-form/src/utils/isRadioInput.ts","../node_modules/react-hook-form/src/utils/isFileInput.ts","../node_modules/react-hook-form/src/utils/isCheckBoxInput.ts","../node_modules/react-hook-form/src/utils/isMultipleSelect.ts","../node_modules/react-hook-form/src/utils/isEmptyString.ts","../node_modules/react-hook-form/src/logic/getCheckboxValue.ts","../node_modules/react-hook-form/src/logic/getFieldValue.ts","../node_modules/react-hook-form/src/utils/isDetached.ts","../node_modules/react-hook-form/src/utils/isEmptyObject.ts","../node_modules/react-hook-form/src/utils/unset.ts","../node_modules/react-hook-form/src/logic/findRemovedFieldAndRemoveListener.ts","../node_modules/react-hook-form/src/utils/isString.ts","../node_modules/react-hook-form/src/logic/getFieldsValues.ts","../node_modules/react-hook-form/src/utils/isSameError.ts","../node_modules/react-hook-form/src/utils/compareObject.ts","../node_modules/react-hook-form/src/utils/isRegex.ts","../node_modules/react-hook-form/src/logic/getValueAndMessage.ts","../node_modules/react-hook-form/src/utils/isFunction.ts","../node_modules/react-hook-form/src/utils/isBoolean.ts","../node_modules/react-hook-form/src/utils/isMessage.ts","../node_modules/react-hook-form/src/logic/getValidateError.ts","../node_modules/react-hook-form/src/logic/appendErrors.ts","../node_modules/react-hook-form/src/logic/validateField.ts","../node_modules/react-hook-form/src/utils/isPrimitive.ts","../node_modules/react-hook-form/src/utils/getPath.ts","../node_modules/react-hook-form/src/logic/assignWatchFields.ts","../node_modules/react-hook-form/src/logic/skipValidation.ts","../node_modules/react-hook-form/src/logic/getFieldArrayParentName.ts","../node_modules/react-hook-form/src/logic/getFieldArrayValueByName.ts","../node_modules/react-hook-form/src/logic/getIsFieldsDifferent.ts","../node_modules/react-hook-form/src/logic/isNameInFieldArray.ts","../node_modules/react-hook-form/src/utils/isSelectInput.ts","../node_modules/react-hook-form/src/utils/validationModeChecker.ts","../node_modules/react-hook-form/src/utils/isRadioOrCheckbox.ts","../node_modules/react-hook-form/src/useForm.ts","../node_modules/react-hook-form/src/logic/shouldRenderBasedOnError.ts","../node_modules/react-hook-form/src/utils/onDomRemove.ts","../node_modules/react-hook-form/src/logic/attachEventListeners.ts","../node_modules/react-hook-form/src/useFormContext.tsx"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types/form';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): (string | number)[] => {\n  const result: (string | number)[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types/form';\n\nexport default function set(object: FieldValues, path: string, value: any) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue: string | object = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types/form';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport unique from './unique';\n\nexport default (obj: any, path: string, defaultValue?: any) => {\n  const result = unique(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types/form';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types/form';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types/form';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","export default (value: string) => value === '';\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport isEmptyString from '../utils/isEmptyString';\nimport { RadioOrCheckboxOption } from '../types/form';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || isEmptyString(value)\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types/form';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  name: InternalFieldName<TFieldValues>,\n) {\n  if (fields[name]) {\n    const field = fields[name]!;\n    const {\n      ref: { value },\n      ref,\n    } = field;\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return field ? getRadioValue(field.options).value : '';\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return field ? getCheckboxValue(field.options).value : false;\n    }\n\n    return value;\n  }\n}\n","import { Ref } from '../types/form';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types/utils';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\n\nfunction baseGet(object: any, path: any) {\n  return [...Array(path.length)].reduce(\n    (result, _, i) => result[path[i]] || result,\n    object,\n  );\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath.slice(0, -1));\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter((data) => isObject(data) && !isEmptyObject(data))\n              .length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport unique from '../utils/unique';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types/form';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fields: FieldRefs<TFieldValues>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  unmountFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n    mutationWatcher,\n  } = field;\n  const fieldRef = fields[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fields, name);\n\n    if (!isUndefined(value)) {\n      unmountFieldsStateRef.current[name] = value;\n    }\n  }\n\n  if (!type) {\n    delete fields[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      unique(options).forEach((option, index): void => {\n        const { ref, mutationWatcher } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !unique(options).length) {\n        delete fields[name];\n      }\n    } else {\n      delete fields[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fields[name];\n  }\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fields) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fields,\n        name,\n      );\n    }\n  }\n\n  return output;\n};\n","import isObject from './isObject';\nimport compareObject from './compareObject';\nimport { FieldError } from '../types/form';\n\nexport default (\n  error: FieldError | undefined,\n  { type, types, message }: FieldError,\n): boolean =>\n  isObject(error) &&\n  error.type === type &&\n  error.message === message &&\n  compareObject(error.types, types);\n","export default (objectA: any = {}, objectB: any = {}) => {\n  const objectAKeys = Object.keys(objectA);\n\n  return (\n    objectAKeys.length === Object.keys(objectB).length &&\n    objectAKeys.every((key) => objectB[key] && objectB[key] === objectA[key])\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types/form';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types/form';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types/form';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: FlatFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isEmptyString from '../utils/isEmptyString';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n): Promise<FlatFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: FlatFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = isEmptyString(value);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox ? (fields[name] as Field).options?.[0].ref : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fields, name);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types/utils';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isPrimitive from './isPrimitive';\nimport { FieldValues, InternalFieldName } from '../types/form';\nimport isArray from './isArray';\n\nconst getPath = <TFieldValues extends FieldValues = FieldValues>(\n  path: InternalFieldName<TFieldValues>,\n  values: TFieldValues | any[],\n): any[] => {\n  const getInnerPath = (\n    value: any,\n    key: number | string,\n    isObject?: boolean,\n  ) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return isArray(values)\n    ? values.map((value, key) => getInnerPath(value, key))\n    : Object.entries(values).map(([key, value]) =>\n        getInnerPath(value, key, true),\n      );\n};\n\nexport default <TFieldValues extends FieldValues = FieldValues>(\n  parentPath: InternalFieldName<TFieldValues>,\n  value: TFieldValues,\n) => getPath(parentPath, value).flat(Infinity);\n","import transformToNestObject from './transformToNestObject';\nimport get from '../utils/get';\nimport getPath from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport { DeepPartial } from '../types/utils';\nimport {\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types/form';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else if (!isUndefined(fieldValues[fieldName])) {\n    value = fieldValues[fieldName];\n  } else {\n    value = get(transformToNestObject(fieldValues), fieldName);\n\n    if (!isUndefined(value)) {\n      getPath<TFieldValues>(fieldName, value).forEach((name: string) =>\n        watchFields.add(name),\n      );\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnChange,\n  hasError,\n  isBlurEvent,\n  isOnSubmit,\n  isReValidateOnSubmit,\n  isOnBlur,\n  isReValidateOnBlur,\n  isSubmitted,\n}: {\n  hasError: boolean;\n  isOnChange: boolean;\n  isBlurEvent?: boolean;\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isReValidateOnSubmit: boolean;\n  isReValidateOnBlur: boolean;\n  isSubmitted: boolean;\n}) =>\n  (isOnChange && isBlurEvent) ||\n  (isOnSubmit && isReValidateOnSubmit) ||\n  (isOnSubmit && !isSubmitted) ||\n  (isOnBlur && !isBlurEvent && !hasError) ||\n  (isReValidateOnBlur && !isBlurEvent && hasError) ||\n  (isReValidateOnSubmit && isSubmitted);\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import transformToNestObject from './transformToNestObject';\nimport getFieldsValues from './getFieldsValues';\nimport get from '../utils/get';\nimport { FieldValues, FieldRefs, InternalFieldName } from '../types/form';\n\nexport default <TFieldValues extends FieldValues = FieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  name?: InternalFieldName<FieldValues>,\n) => {\n  const results = transformToNestObject(getFieldsValues(fields));\n  return name ? get(results, name, results) : results;\n};\n","import isUndefined from '../utils/isUndefined';\nimport isArray from '../utils/isArray';\n\nexport default function getIsFieldsDifferent(\n  referenceArray: unknown[],\n  differenceArray: unknown[],\n) {\n  if (\n    !isArray<any>(referenceArray) ||\n    !isArray<any>(differenceArray) ||\n    referenceArray.length !== differenceArray.length\n  ) {\n    return true;\n  }\n\n  for (let i = 0; i < referenceArray.length; i++) {\n    const dataA = referenceArray[i];\n    const dataB = differenceArray[i];\n\n    if (\n      isUndefined(dataB) ||\n      Object.keys(dataA).length !== Object.keys(dataB).length\n    ) {\n      return true;\n    }\n\n    for (const key in dataA) {\n      if (dataA[key] !== dataB[key]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n","export const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (names: Set<string>, name: string) =>\n  [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types/form';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types/form';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types/form';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport shouldRenderBasedOnError from './logic/shouldRenderBasedOnError';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport getFieldArrayValueByName from './logic/getFieldArrayValueByName';\nimport getIsFieldsDifferent from './logic/getIsFieldsDifferent';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport isObject from './utils/isObject';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isSameError from './utils/isSameError';\nimport isUndefined from './utils/isUndefined';\nimport onDomRemove from './utils/onDomRemove';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport unique from './utils/unique';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  Touched,\n  FieldError,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  DefaultValuesAtRender,\n  FlatFieldErrors,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n} from './types/form';\nimport { LiteralToPrimitive, DeepPartial, NonUndefined } from './types/utils';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const errorsRef = React.useRef<FieldErrors<TFieldValues>>({});\n  const touchedFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const fieldArrayDefaultValues = React.useRef<Record<string, unknown[]>>({});\n  const watchFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const dirtyFieldsRef = React.useRef<Touched<TFieldValues>>({});\n  const watchFieldsHookRef = React.useRef<\n    Record<string, Set<InternalFieldName<TFieldValues>>>\n  >({});\n  const watchFieldsHookRenderRef = React.useRef<Record<string, Function>>({});\n  const fieldsWithValidationRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const validFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const isValidRef = React.useRef(true);\n  const defaultValuesRef = React.useRef<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >(defaultValues);\n  const defaultValuesAtRenderRef = React.useRef(\n    {} as DefaultValuesAtRender<TFieldValues>,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const isSubmittedRef = React.useRef(false);\n  const isDirtyRef = React.useRef(false);\n  const submitCountRef = React.useRef(0);\n  const isSubmittingRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const unmountFieldsStateRef = React.useRef<Record<string, any>>({});\n  const resetFieldArrayFunctionRef = React.useRef({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<Set<string>>(new Set());\n  const [, render] = React.useState();\n  const { isOnBlur, isOnSubmit, isOnChange, isOnAll } = React.useRef(\n    modeChecker(mode),\n  ).current;\n  const validateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const isWindowUndefined = typeof window === UNDEFINED;\n  const isWeb =\n    typeof document !== UNDEFINED &&\n    !isWindowUndefined &&\n    !isUndefined(window.HTMLElement);\n  const isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnSubmit: isReValidateOnSubmit,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const reRender = React.useCallback(() => {\n    if (!isUnMount.current) {\n      render({});\n    }\n  }, []);\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FlatFieldErrors<TFieldValues>,\n      shouldRender: boolean | null = false,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        shouldRenderBasedOnError<TFieldValues>({\n          errors: errorsRef.current,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(errorsRef.current, name);\n\n      if (isEmptyObject(error)) {\n        if (fieldsWithValidationRef.current.has(name) || resolverRef.current) {\n          validFieldsRef.current.add(name);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        errorsRef.current = unset(errorsRef.current, name);\n      } else {\n        validFieldsRef.current.delete(name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !isSameError(previousError, error[name] as FieldError);\n\n        set(errorsRef.current, name, error[name]);\n      }\n\n      if (shouldReRender && !isNullOrUndefined(shouldRender)) {\n        reRender();\n        return true;\n      }\n    },\n    [reRender, resolverRef],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      { ref, options }: Field,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref)) {\n        if (isString(value)) {\n          ref.value = value;\n        } else {\n          ref.files = value as FileList;\n        }\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string).includes(selectRef.value)),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = (value as string).includes(\n                  checkboxRef.value,\n                )),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [isWeb],\n  );\n\n  const setDirty = React.useCallback(\n    (name: InternalFieldName<TFieldValues>): boolean => {\n      const { isDirty, dirtyFields } = readFormStateRef.current;\n\n      if (!fieldsRef.current[name] || (!isDirty && !dirtyFields)) {\n        return false;\n      }\n\n      const isFieldDirty =\n        defaultValuesAtRenderRef.current[name] !==\n        getFieldValue(fieldsRef.current, name);\n      const isDirtyFieldExist = get(dirtyFieldsRef.current, name);\n      const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n      const previousIsDirty = isDirtyRef.current;\n\n      if (isFieldDirty) {\n        set(dirtyFieldsRef.current, name, true);\n      } else {\n        unset(dirtyFieldsRef.current, name);\n      }\n\n      isDirtyRef.current =\n        (isFieldArray &&\n          getIsFieldsDifferent(\n            getFieldArrayValueByName(\n              fieldsRef.current,\n              getFieldArrayParentName(name),\n            ),\n            get(defaultValuesRef.current, getFieldArrayParentName(name)),\n          )) ||\n        !isEmptyObject(dirtyFieldsRef.current);\n\n      return (\n        (isDirty && previousIsDirty !== isDirtyRef.current) ||\n        (dirtyFields && isDirtyFieldExist !== get(dirtyFieldsRef.current, name))\n      );\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = await validateField<TFieldValues>(\n          fieldsRef,\n          validateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n        );\n\n        shouldRenderBaseOnError(name, error, skipReRender ? null : false);\n\n        return isEmptyObject(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, validateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      payload:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getFieldArrayValueByName(fieldsRef.current),\n        contextRef.current,\n        validateAllFieldCriteria,\n      );\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (isArray(payload)) {\n        payload.forEach((name) => {\n          const error = get(errors, name);\n\n          if (error) {\n            set(errorsRef.current, name, error);\n          } else {\n            unset(errorsRef.current, name);\n          }\n        });\n        reRender();\n      } else {\n        const error = get(errors, payload);\n\n        shouldRenderBaseOnError(\n          payload,\n          (error ? { [payload]: error } : {}) as FlatFieldErrors<TFieldValues>,\n          previousFormIsValid !== isValidRef.current,\n        );\n      }\n\n      return isEmptyObject(errorsRef.current);\n    },\n    [reRender, shouldRenderBaseOnError, validateAllFieldCriteria, resolverRef],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, true)),\n        );\n        reRender();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [\n      executeSchemaOrResolverValidation,\n      executeValidation,\n      reRender,\n      resolverRef,\n    ],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues>,\n      config: SetValueConfig,\n      parentFieldName?: string,\n    ) => {\n      for (const key in value) {\n        const fieldName = `${parentFieldName || name}${\n          isArray(value) ? `[${key}]` : `.${key}`\n        }`;\n        const field = fieldsRef.current[fieldName];\n\n        if (isObject(value[key])) {\n          setInternalValues(name, value[key], config, fieldName);\n        }\n\n        if (field) {\n          setFieldValue(field, value[key]);\n\n          if (config.shouldDirty) {\n            setDirty(fieldName);\n          }\n\n          if (config.shouldValidate) {\n            trigger(fieldName as FieldName<TFieldValues>);\n          }\n        }\n      }\n    },\n    [trigger, setFieldValue, setDirty],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig,\n    ): boolean | void => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(fieldsRef.current[name] as Field, value);\n\n        return config.shouldDirty && setDirty(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n      }\n    },\n    [setDirty, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(watchFieldsHookRef.current)) {\n      for (const key in watchFieldsHookRef.current) {\n        if (\n          watchFieldsHookRef.current[key].has(name) ||\n          !watchFieldsHookRef.current[key].size ||\n          isNameInFieldArray(fieldArrayNamesRef.current, name)\n        ) {\n          watchFieldsHookRenderRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: NonUndefined<TFieldValue> extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config: SetValueConfig = {},\n  ): void {\n    const shouldRender =\n      setInternalValue(name, value as TFieldValues[string], config) ||\n      !isPrimitive(value) ||\n      isFieldWatched(name);\n\n    renderWatchedInputs(name);\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    if (config.shouldValidate) {\n      trigger(name as any);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = target ? (target as Ref).name : '';\n        const field = fieldsRef.current[name];\n        let error: FlatFieldErrors<TFieldValues>;\n\n        if (!field) {\n          return;\n        }\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const shouldSkipValidation =\n          !isOnAll &&\n          skipValidation({\n            hasError: !!get(errorsRef.current, name),\n            isOnChange,\n            isBlurEvent,\n            isOnSubmit,\n            isReValidateOnSubmit,\n            isOnBlur,\n            isReValidateOnBlur,\n            isSubmitted: isSubmittedRef.current,\n          });\n        let shouldRender = setDirty(name) || isFieldWatched(name);\n\n        if (\n          isBlurEvent &&\n          !get(touchedFieldsRef.current, name) &&\n          readFormStateRef.current.touched\n        ) {\n          set(touchedFieldsRef.current, name, true);\n          shouldRender = true;\n        }\n\n        if (shouldSkipValidation) {\n          renderWatchedInputs(name);\n          return shouldRender && reRender();\n        }\n\n        if (resolver) {\n          const { errors } = await resolver(\n            getFieldArrayValueByName(fieldsRef.current),\n            contextRef.current,\n            validateAllFieldCriteria,\n          );\n          const previousFormIsValid = isValidRef.current;\n          isValidRef.current = isEmptyObject(errors);\n\n          error = (get(errors, name)\n            ? { [name]: get(errors, name) }\n            : {}) as FlatFieldErrors<TFieldValues>;\n\n          if (previousFormIsValid !== isValidRef.current) {\n            shouldRender = true;\n          }\n        } else {\n          error = await validateField<TFieldValues>(\n            fieldsRef,\n            validateAllFieldCriteria,\n            field,\n          );\n        }\n\n        renderWatchedInputs(name);\n\n        if (!shouldRenderBaseOnError(name, error) && shouldRender) {\n          reRender();\n        }\n      };\n\n  const validateResolver = React.useCallback(\n    (values: any = {}) => {\n      const fieldValues = isEmptyObject(defaultValuesRef.current)\n        ? getFieldsValues(fieldsRef.current)\n        : defaultValuesRef.current;\n\n      resolverRef.current!(\n        transformToNestObject({\n          ...fieldValues,\n          ...values,\n        }),\n        contextRef.current,\n        validateAllFieldCriteria,\n      ).then(({ errors }) => {\n        const previousFormIsValid = isValidRef.current;\n        isValidRef.current = isEmptyObject(errors);\n\n        if (previousFormIsValid !== isValidRef.current) {\n          reRender();\n        }\n      });\n    },\n    [reRender, validateAllFieldCriteria, resolverRef],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) => {\n      findRemovedFieldAndRemoveListener(\n        fieldsRef.current,\n        handleChangeRef.current!,\n        field,\n        unmountFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      );\n    },\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (\n        field &&\n        (!isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) ||\n          forceDelete)\n      ) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister) {\n          [\n            errorsRef,\n            touchedFieldsRef,\n            dirtyFieldsRef,\n            defaultValuesAtRenderRef,\n          ].forEach((data) => unset(data.current, field.ref.name));\n          [\n            fieldsWithValidationRef,\n            validFieldsRef,\n            watchFieldsRef,\n          ].forEach((data) => data.current.delete(field.ref.name));\n\n          if (\n            readFormStateRef.current.isValid ||\n            readFormStateRef.current.touched\n          ) {\n            reRender();\n\n            if (resolverRef.current) {\n              validateResolver();\n            }\n          }\n        }\n      }\n    },\n    [reRender, validateResolver, removeFieldEventListener, resolverRef],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    if (name) {\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(errorsRef.current, inputName),\n      );\n    } else {\n      errorsRef.current = {};\n    }\n\n    reRender();\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    isValidRef.current = false;\n\n    set(errorsRef.current, name, {\n      ...error,\n      ref: (fieldsRef.current[name] || {})!.ref,\n    });\n\n    reRender();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? watchFieldsHookRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef.current,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      if (isUndefined(watchId)) {\n        isWatchAllRef.current = true;\n      }\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    (isArray(name) ? name : [name]).forEach((fieldName) =>\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true),\n    );\n  }\n\n  function registerFieldsRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (!ref.name) {\n      // eslint-disable-next-line no-console\n      return console.warn('Missing name @', ref);\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let isFieldArray;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          unique(field.options).find((option) => {\n            return value === option.ref.value && option.ref === ref;\n          })\n        : ref === field.ref)\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () =>\n        removeFieldEventListenerAndRef(field),\n      );\n\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...unique((field && field.options) || []),\n              {\n                ref,\n                mutationWatcher,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n            mutationWatcher,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      unmountFieldsStateRef.current[name],\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = isEmptyUnmountFields\n        ? get(defaultValuesRef.current, name)\n        : unmountFieldsStateRef.current[name];\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (resolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(fieldsRef, validateAllFieldCriteria, field).then(\n          (error) => {\n            const previousFormIsValid = isValidRef.current;\n\n            isEmptyObject(error)\n              ? validFieldsRef.current.add(name)\n              : (isValidRef.current = false);\n\n            if (previousFormIsValid !== isValidRef.current) {\n              reRender();\n            }\n          },\n        );\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue\n        ? getFieldValue(fields, name)\n        : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners({\n        field:\n          isRadioOrCheckbox && field.options\n            ? field.options[field.options.length - 1]\n            : field,\n        isRadioOrCheckbox:\n          isRadioOrCheckbox || isSelectInput(ref as FieldElement),\n        handleChange: handleChangeRef.current,\n      });\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldsRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldsRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldsRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      callback: SubmitHandler<TSubmitFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues: FieldValues = {\n        ...unmountFieldsStateRef.current,\n        ...getFieldsValues(fieldsRef.current),\n      };\n\n      if (readFormStateRef.current.isSubmitting) {\n        isSubmittingRef.current = true;\n        reRender();\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            transformToNestObject(fieldValues),\n            contextRef.current,\n            validateAllFieldCriteria,\n          );\n          errorsRef.current = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                validateAllFieldCriteria,\n                field,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                validFieldsRef.current.delete(name);\n              } else if (fieldsWithValidationRef.current.has(name)) {\n                validFieldsRef.current.add(name);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(errorsRef.current).every((name) =>\n            Object.keys(fieldsRef.current).includes(name),\n          )\n        ) {\n          errorsRef.current = {};\n          reRender();\n          await callback(transformToNestObject(fieldValues), e);\n        } else {\n          errorsRef.current = {\n            ...errorsRef.current,\n            ...fieldErrors,\n          };\n          if (shouldFocusError && isWeb) {\n            focusOnErrorField(fieldsRef.current, fieldErrors);\n          }\n        }\n      } finally {\n        isSubmittedRef.current = true;\n        isSubmittingRef.current = false;\n        submitCountRef.current = submitCountRef.current + 1;\n        reRender();\n      }\n    },\n    [isWeb, reRender, resolverRef, shouldFocusError, validateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    fieldsRef.current = {};\n    if (!errors) {\n      errorsRef.current = {};\n    }\n\n    if (!touched) {\n      touchedFieldsRef.current = {};\n    }\n\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n      isValidRef.current = true;\n    }\n\n    if (!isDirty) {\n      isDirtyRef.current = false;\n    }\n\n    if (!dirtyFields) {\n      dirtyFieldsRef.current = {};\n    }\n\n    if (!isSubmitted) {\n      isSubmittedRef.current = false;\n    }\n\n    if (!submitCount) {\n      submitCountRef.current = 0;\n    }\n\n    defaultValuesAtRenderRef.current = {} as DefaultValuesAtRender<\n      TFieldValues\n    >;\n    fieldArrayDefaultValues.current = {};\n    unmountFieldsStateRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    if (values) {\n      defaultValuesRef.current = values;\n    }\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n\n    reRender();\n  };\n\n  const getValue = <TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue => getFieldValue(fieldsRef.current, name);\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    const fields = fieldsRef.current;\n\n    if (isString(payload)) {\n      return getValue(payload);\n    }\n\n    if (isArray(payload)) {\n      return payload.reduce(\n        (previous, name) => ({\n          ...previous,\n          [name]: getValue(name),\n        }),\n        {},\n      );\n    }\n\n    return transformToNestObject(getFieldsValues(fields));\n  }\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n      fieldsRef.current &&\n        process.env.NODE_ENV === 'production' &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver) {\n    isValidRef.current =\n      validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\n      isEmptyObject(errorsRef.current);\n  }\n\n  const formState = {\n    dirtyFields: dirtyFieldsRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isDirty: isDirtyRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit\n      ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\n      : isValidRef.current,\n  };\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [\n      reRender,\n      setInternalValue,\n      trigger,\n    ]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy<FormStateProxy<TFieldValues>>(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = {\n    removeFieldEventListener,\n    renderWatchedInputs,\n    watchInternal,\n    reRender,\n    ...(resolver ? { validateSchemaIsValid: validateResolver } : {}),\n    mode: {\n      isOnBlur,\n      isOnSubmit,\n      isOnChange,\n    },\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnSubmit,\n    },\n    errorsRef,\n    touchedFieldsRef,\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    fieldArrayDefaultValues,\n    validFieldsRef,\n    dirtyFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    isDirtyRef,\n    isSubmittedRef,\n    readFormStateRef,\n    defaultValuesRef,\n    unmountFieldsStateRef,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: errorsRef.current,\n    ...commonProps,\n  };\n}\n","import isEmptyObject from '../utils/isEmptyObject';\nimport isSameError from '../utils/isSameError';\nimport get from '../utils/get';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FlatFieldErrors,\n} from '../types/form';\n\nexport default function shouldRenderBasedOnError<\n  TFieldValues extends FieldValues\n>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FlatFieldErrors<TFieldValues>;\n  name: InternalFieldName<TFieldValues>;\n  validFields: Set<InternalFieldName<TFieldValues>>;\n  fieldsWithValidation: Set<InternalFieldName<TFieldValues>>;\n}): boolean {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name)) {\n    return false;\n  }\n\n  if (\n    isFormValid !== isFieldValid ||\n    (!isFormValid && !existFieldError) ||\n    (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))\n  ) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n","import { Ref, MutationWatcher } from '../types/form';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove(\n  element: Ref,\n  onDetachCallback: VoidFunction,\n): MutationWatcher {\n  const observer = new MutationObserver((): void => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types/form';\n\nexport default function attachEventListeners({\n  field: { ref },\n  handleChange,\n  isRadioOrCheckbox,\n}: {\n  field: Field;\n  isRadioOrCheckbox: boolean;\n  handleChange?: EventListenerOrEventListenerObject;\n}): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues } from './types/form';\nimport { FormProviderProps } from './types/props';\n\nexport const FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n"],"names":["isHTMLElement","value","HTMLElement","EVENTS","BLUR","CHANGE","INPUT","VALIDATION_MODE","onBlur","onChange","onSubmit","all","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","isNullOrUndefined","isArray","Array","isObjectType","isObject","isKey","test","stringToPath","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","length","lastIndex","key","newValue","objValue","isNaN","transformToNestObject","data","Object","entries","reduce","previous","_ref2","assign","isUndefined","val","undefined","unique","filter","Boolean","get","obj","defaultValue","split","focusOnErrorField","fields","fieldErrors","field","ref","focus","options","removeAllEventListeners","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","getRadioValue","option","checked","getMultipleSelectValue","_ref3","selected","map","_ref4","isRadioInput","element","type","isFileInput","isCheckBoxInput","isMultipleSelect","isEmptyString","defaultResult","validResult","getCheckboxValue","values","_ref5","attributes","getFieldValue","name","files","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","isEmptyObject","keys","unset","updatePath","childObject","_","i","baseGet","slice","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isSameRef","fieldValue","isString","getFieldsValues","search","output","startsWith","find","isSameError","error","_ref6","types","message","objectA","arguments","objectB","objectAKeys","every","compareObject","isRegex","RegExp","getValueAndMessage","validationData","isValueMessage","isFunction","isBoolean","isMessage","isValidElement","getValidateError","appendErrors","validateAllFieldCriteria","errors","validateField","async","fieldsRef","_ref8","required","maxLength","minLength","min","max","pattern","validate","current","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","requiredValue","requiredMessage","_a","exceedMin","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","Date","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","validateRef","validateError","validationResult","validateFunction","isPrimitive","getPath","getInnerPath","pathWithIndex","_ref9","assignWatchFields","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","getPath$1","parentPath","flat","Infinity","forEach","skipValidation","_ref10","isOnChange","hasError","isBlurEvent","isOnSubmit","isReValidateOnSubmit","isOnBlur","isReValidateOnBlur","isSubmitted","getFieldArrayParentName","substring","indexOf","getFieldValueByName","results","getIsFieldsDifferent","referenceArray","differenceArray","dataA","dataB","isMatchFieldArrayName","searchName","isNameInFieldArray","names","some","isSelectInput","modeChecker","mode","isOnAll","isRadioOrCheckboxFunction","useForm","reValidateMode","resolver","context","defaultValues","shouldFocusError","shouldUnregister","criteriaMode","useRef","errorsRef","touchedFieldsRef","fieldArrayDefaultValues","watchFieldsRef","Set","dirtyFieldsRef","watchFieldsHookRef","watchFieldsHookRenderRef","fieldsWithValidationRef","validFieldsRef","isValidRef","defaultValuesRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","isSubmittedRef","isDirtyRef","submitCountRef","isSubmittingRef","handleChangeRef","unmountFieldsStateRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","render","useState","isWindowUndefined","window","isWeb","document","isProxyEnabled","Proxy","readFormStateRef","isDirty","dirtyFields","submitCount","touched","isSubmitting","reRender","useCallback","shouldRenderBaseOnError","shouldRender","shouldReRender","_ref7","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","has","shouldRenderBasedOnError","previousError","delete","setFieldValue","_ref11","rawValue","_ref12","radioRef","selectRef","includes","_ref13","checkboxRef","setDirty","isFieldDirty","isDirtyFieldExist","isFieldArray","previousIsDirty","executeValidation","skipReRender","executeSchemaOrResolverValidation","previousFormIsValid","payload","trigger","Promise","setInternalValues","config","parentFieldName","shouldDirty","shouldValidate","setInternalValue","isFieldWatched","renderWatchedInputs","found","size","target","_ref14","shouldSkipValidation","validateResolver","then","_ref15","removeFieldEventListener","forceDelete","handleChange","mutationWatcher","fieldRef","disconnect","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","registerFieldsRef","validateOptions","console","warn","fieldRefAndValidationOptions","isEmptyDefaultValue","onDetachCallback","observer","MutationObserver","observe","childList","subtree","onDomRemove","isEmptyUnmountFields","_ref","addEventListener","attachEventListeners","handleSubmit","callback","e","preventDefault","persist","fieldError","getValue","useEffect","formState","commonProps","setValue","getValues","register","refOrValidationOptions","rules","unregister","prop","control","validateSchemaIsValid","watch","reset","omitResetState","inputRef","closest","resetFieldArray","_ref16","resetRefs","clearErrors","inputName","setError","FormContext","createContext","displayName"],"sourceRoot":""}